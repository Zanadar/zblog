{"db":[{"meta":{"exported_on":1556732114018,"version":"2.21.1"},"data":{"actions":[],"api_keys":[{"id":"5c6f8a21281afc00b56f76bd","type":"admin","secret":"ae191508a61c992791ef2a1ecd326ffd9069b3de61e5aee82ec8ec1a0703a3e8","role_id":"5bb7755755369e00b5d0d773","integration_id":"5c6f8a21281afc00b56f76bc","last_seen_at":null,"last_seen_version":null,"created_at":"2019-02-22T05:35:29.000Z","updated_at":"2019-02-22T05:35:29.000Z"}],"app_fields":[],"app_settings":[],"apps":[],"brute":[{"key":"xW+ihRJ4jignoBQmIDHURgVQTygiSiXcYdUBMU+T8S4=","firstRequest":1556731186550,"lastRequest":1556731186550,"lifetime":1556734786557,"count":1}],"integrations":[{"id":"5c6f8a21281afc00b56f76bc","name":"Zapier","slug":"zapier","icon_image":null,"description":"Built-in Zapier integration","created_at":"2019-02-22T05:35:29.000Z","updated_at":"2019-02-22T05:35:29.000Z","type":"builtin"}],"invites":[],"members":[],"migrations":[{"id":1,"name":"1-create-tables.js","version":"init","currentVersion":"1.22"},{"id":2,"name":"2-create-fixtures.js","version":"init","currentVersion":"1.22"},{"id":3,"name":"1-multiple-authors-DDL.js","version":"1.22","currentVersion":"1.22"},{"id":4,"name":"1-multiple-authors-DML.js","version":"1.22","currentVersion":"1.22"},{"id":5,"name":"1-add-permissions-redirect.js","version":"1.9","currentVersion":"1.22"},{"id":6,"name":"1-add-backup-client.js","version":"1.7","currentVersion":"1.22"},{"id":7,"name":"1-og-twitter-post.js","version":"1.5","currentVersion":"1.22"},{"id":8,"name":"1-codeinjection-post.js","version":"1.4","currentVersion":"1.22"},{"id":9,"name":"1-post-excerpt.js","version":"1.3","currentVersion":"1.22"},{"id":10,"name":"1-custom-template-post.js","version":"1.13","currentVersion":"1.22"},{"id":11,"name":"2-theme-permissions.js","version":"1.13","currentVersion":"1.22"},{"id":12,"name":"1-add-webhooks-table.js","version":"1.18","currentVersion":"1.22"},{"id":13,"name":"1-webhook-permissions.js","version":"1.19","currentVersion":"1.22"},{"id":14,"name":"1-remove-settings-keys.js","version":"1.20","currentVersion":"1.22"},{"id":15,"name":"1-add-contributor-role.js","version":"1.21","currentVersion":"1.22"},{"id":16,"name":"1-update-koenig-beta-html.js","version":"1.25","currentVersion":"1.25"},{"id":17,"name":"2-demo-post.js","version":"1.25","currentVersion":"1.25"},{"id":18,"name":"1-rename-amp-column.js","version":"2.0","currentVersion":"2.0"},{"id":19,"name":"2-update-posts.js","version":"2.0","currentVersion":"2.0"},{"id":20,"name":"3-remove-koenig-labs.js","version":"2.0","currentVersion":"2.0"},{"id":21,"name":"4-permalink-setting.js","version":"2.0","currentVersion":"2.0"},{"id":22,"name":"5-remove-demo-post.js","version":"2.0","currentVersion":"2.0"},{"id":23,"name":"6-replace-fixture-posts.js","version":"2.0","currentVersion":"2.0"},{"id":24,"name":"1-add-sessions-table.js","version":"2.2","currentVersion":"2.2"},{"id":25,"name":"2-add-integrations-and-api-key-tables.js","version":"2.2","currentVersion":"2.2"},{"id":26,"name":"3-insert-admin-integration-role.js","version":"2.2","currentVersion":"2.2"},{"id":27,"name":"4-insert-integration-and-api-key-permissions.js","version":"2.2","currentVersion":"2.2"},{"id":28,"name":"5-add-mobiledoc-revisions-table.js","version":"2.2","currentVersion":"2.2"},{"id":29,"name":"1-add-webhook-columns.js","version":"2.3","currentVersion":"2.3"},{"id":30,"name":"2-add-webhook-edit-permission.js","version":"2.3","currentVersion":"2.3"},{"id":31,"name":"1-add-webhook-permission-roles.js","version":"2.6","currentVersion":"2.6"},{"id":32,"name":"1-add-members-table.js","version":"2.8","currentVersion":"2.8"},{"id":33,"name":"1-remove-empty-strings.js","version":"2.13","currentVersion":"2.13"},{"id":34,"name":"1-add-actions-table.js","version":"2.14","currentVersion":"2.14"},{"id":35,"name":"2-add-actions-permissions.js","version":"2.14","currentVersion":"2.14"},{"id":36,"name":"1-add-type-column-to-integrations.js","version":"2.15","currentVersion":"2.15"},{"id":37,"name":"2-insert-zapier-integration.js","version":"2.15","currentVersion":"2.15"},{"id":38,"name":"1-add-members-perrmissions.js","version":"2.16","currentVersion":"2.16"},{"id":39,"name":"1-normalize-settings.js","version":"2.17","currentVersion":"2.17"},{"id":40,"name":"2-posts-add-canonical-url.js","version":"2.17","currentVersion":"2.17"},{"id":41,"name":"1-restore-settings-from-backup.js","version":"2.18","currentVersion":"2.18"},{"id":42,"name":"1-update-editor-permissions.js","version":"2.21","currentVersion":"2.21"}],"migrations_lock":[{"lock_key":"km01","locked":0,"acquired_at":"2019-04-24T19:22:27.000Z","released_at":"2019-04-24T19:22:28.000Z"}],"mobiledoc_revisions":[{"id":"5bcb824071956100bf0aa288","post_id":"5b8bc38153f78100bf4cf733","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"'Learning how to learn', by Barbara Oakley, is a compendium of techniques for learning effectively or more effectively, backed by neuroscience and cognitive psychology. Increasing ones ability to learn speeds up your knowledge compounding rate, and is time magnificently well spent.\"]]],[3,\"ol\",[[[0,[],0,\"Know of and take advantage of the different modes of the brain: Diffuse and Focussed. If you're learning something totally new or you're stuck on a problem, take a break of some sort to allow diffuse mode to do its work.\"]],[[0,[],0,\"Pomodoro technique is useful for giving your brain adequate focus and break time to integrate new information. It can also be useful for overcoming procrastination\"]],[[0,[],0,\"Exercise: it increases your memory and ability to learn new things\"]],[[0,[],0,\"Re-reading and highlighting aren't as effective as studying and then attempting to recall directly the content of the material you're studying (page, video, etc).\"]],[[0,[],0,\"Practice and review of material are key to deeper mastery\"]],[[0,[],0,\"Self knowledge: Sometimes people who learn more slowly learn more deeply. Sometimes those with poor working memories are creative. Sometimes super focus and strong working memory block creativity by preventing associative thinking. Sometimes learning to rapidly can lead to incorrect conclusions or superficial understanding.\"]]]],[1,\"p\",[[0,[],0,\"\\t\"]]]]}","created_at_ts":1540063807936,"created_at":"2018-10-20T19:30:08.000Z"},{"id":"5bcb824071956100bf0aa289","post_id":"5b8bc38153f78100bf4cf733","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"'Learning how to learn', by Barbara Oakley, is a compendium of techniques for learning effectively or more effectively, backed by neuroscience and cognitive psychology. Increasing ones ability to learn speeds up your knowledge compounding rate, and is time magnificently well spent.\"]]],[3,\"ol\",[[[0,[0],1,\"Know of and take advantage of the different modes of the brain\"],[0,[],0,\": Diffuse and Focussed. If you're learning something totally new or you're stuck on a problem, take a break of some sort to allow diffuse mode to do its work.\"]],[[0,[0],1,\"Pomodoro\"],[0,[],0,\" technique is useful for giving your brain adequate focus and break time to integrate new information. It can also be useful for overcoming procrastination\"]],[[0,[0],1,\"Exercise\"],[0,[],0,\": it increases your memory and ability to learn new things\"]],[[0,[],0,\"Re-reading and highlighting aren't as effective as studying and then \"],[0,[0],1,\"attempting to recall\"],[0,[],0,\" directly the content of the material you're studying (page, video, etc).\"]],[[0,[0],1,\"Practice and review\"],[0,[],0,\" of material are key to deeper mastery\"]],[[0,[0],1,\"Self knowledge\"],[0,[],0,\": Sometimes people who learn more slowly learn more deeply. Sometimes those with poor working memories are creative. Sometimes super focus and strong working memory block creativity by preventing associative thinking. Sometimes learning to rapidly can lead to incorrect conclusions or superficial understanding.\"]]]],[1,\"p\",[[0,[],0,\"\\t\"]]]]}","created_at_ts":1540063807937,"created_at":"2018-10-20T19:30:08.000Z"},{"id":"5bcbdbc671956100bf0aa2d1","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? So I go \\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086726200,"created_at":"2018-10-21T01:52:06.000Z"},{"id":"5bcbdbda71956100bf0aa2d2","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? So I'll continue to ask\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086746407,"created_at":"2018-10-21T01:52:26.000Z"},{"id":"5bcbdbe271956100bf0aa2d3","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? So I'll continue to ask, \\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086754357,"created_at":"2018-10-21T01:52:34.000Z"},{"id":"5bcbdc0871956100bf0aa2d4","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? And so for now, the important problem I have is actually finding the important problems. I'll let you know if an\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086792251,"created_at":"2018-10-21T01:53:12.000Z"},{"id":"5bcbdc1d71956100bf0aa2d5","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? And so for now, the important problem I have is actually finding the important problems. I'll let you know if I figure it out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086813631,"created_at":"2018-10-21T01:53:33.000Z"},{"id":"5bcbdc3571956100bf0aa2d6","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? And so for now, I have an import problem: I have is actually finding the important problems. I'll let you know if I figure it out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086837819,"created_at":"2018-10-21T01:53:57.000Z"},{"id":"5bcbdc3b71956100bf0aa2d7","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? And so for now, I have an import problem: I have to actually finding the important problems. I'll let you know if I figure it out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086843877,"created_at":"2018-10-21T01:54:03.000Z"},{"id":"5bcbdc4871956100bf0aa2d8","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the Chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? And so for now, I have an import problem: I have to actually finding the important problems. I'll let you know when I figure them out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540086856762,"created_at":"2018-10-21T01:54:16.000Z"},{"id":"5bcbe42371956100bf0aa2d9","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be chef instead of a cook. Or else why bother? And so for now, I have an import problem: I have to actually finding the important problems. I'll let you know when I figure them out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1540088867934,"created_at":"2018-10-21T02:27:47.000Z"},{"id":"5beb50854f25ed00c0ee9206","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from `ruby:2.3.1-slim -> ruby:2.3-slim`. Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember what we saw in the `ci:latest` docker container? That seemed to indicate something else was going on. Well it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148229664,"created_at":"2018-11-13T22:30:29.000Z"},{"id":"5beb508b4f25ed00c0ee9207","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from `ruby:2.3.1-slim -> ruby:2.3-slim. Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember what we saw in the `ci:latest` docker container? That seemed to indicate something else was going on. Well it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148235284,"created_at":"2018-11-13T22:30:35.000Z"},{"id":"5beb50904f25ed00c0ee9208","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember what we saw in the `ci:latest` docker container? That seemed to indicate something else was going on. Well it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148240097,"created_at":"2018-11-13T22:30:40.000Z"},{"id":"5beb509a4f25ed00c0ee9209","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember what we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Well it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148250825,"created_at":"2018-11-13T22:30:50.000Z"},{"id":"5beb50a14f25ed00c0ee920a","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Well it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148257075,"created_at":"2018-11-13T22:30:57.000Z"},{"id":"5beb50ae4f25ed00c0ee920b","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148270120,"created_at":"2018-11-13T22:31:10.000Z"},{"id":"5beb50bd4f25ed00c0ee920c","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again. I'll share that soon.\"]]],[1,\"p\",[]],[1,\"p\",[[0,[3],1,\"PS\"]]],[1,\"p\",[[0,[],0,\"What was up with what we saw in docker? Well read a later post to find out.\"]]]]}","created_at_ts":1542148285027,"created_at":"2018-11-13T22:31:25.000Z"},{"id":"5beb50c04f25ed00c0ee920d","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work, I was working on merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again. I'll share that soon.\"]]]]}","created_at_ts":1542148288872,"created_at":"2018-11-13T22:31:28.000Z"},{"id":"5beb53004f25ed00c0ee920e","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work I was trying to merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again. I'll share that soon.\"]]]]}","created_at_ts":1542148863941,"created_at":"2018-11-13T22:41:04.000Z"},{"id":"5beb53254f25ed00c0ee920f","post_id":"5af0e8bcc6b750002285a22a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be a chef instead of a cook. Or else why bother? And so for now, I have an important problem: I have to actually _find_ the important problems. I'll let you know when I figure them out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","created_at_ts":1542148901214,"created_at":"2018-11-13T22:41:41.000Z"},{"id":"5c01abaa91f04500c0db701f","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends.\"]]]]}","created_at_ts":1543613354160,"created_at":"2018-11-30T21:29:14.000Z"},{"id":"5c01abb791f04500c0db7020","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. And now, \"]]]]}","created_at_ts":1543613367280,"created_at":"2018-11-30T21:29:27.000Z"},{"id":"5c01ac0d91f04500c0db7021","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. And now, \"]]]]}","created_at_ts":1543613453430,"created_at":"2018-11-30T21:30:53.000Z"},{"id":"5c01ac3091f04500c0db7022","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure the PR needs work, but its gotten a bit of attention and hopefully it'll land.\"]]]]}","created_at_ts":1543613488866,"created_at":"2018-11-30T21:31:28.000Z"},{"id":"5c01ac5791f04500c0db7023","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure the PR needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, \"]]]]}","created_at_ts":1543613527203,"created_at":"2018-11-30T21:32:07.000Z"},{"id":"5c01ac6991f04500c0db7024","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure the PR needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free, but giv\"]]]]}","created_at_ts":1543613545046,"created_at":"2018-11-30T21:32:25.000Z"},{"id":"5c01ac6d91f04500c0db7025","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure the PR needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free\"]]]]}","created_at_ts":1543613549878,"created_at":"2018-11-30T21:32:29.000Z"},{"id":"5c01ac8191f04500c0db7026","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure the PR needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free and complaining feels good, but giving a damn feels better.\"]]]]}","created_at_ts":1543613569896,"created_at":"2018-11-30T21:32:49.000Z"},{"id":"5c01acb991f04500c0db7027","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]],[\"a\",[\"href\",\"https://github.com/docker/cli/pull/1498\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure \"],[0,[5],1,\"the PR\"],[0,[],0,\" needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free and complaining feels good, but giving a damn feels better.\"]]]]}","created_at_ts":1543613625396,"created_at":"2018-11-30T21:33:45.000Z"},{"id":"5c01acc391f04500c0db7028","post_id":"5beb1b354f25ed00c0ee91b6","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]],[\"a\",[\"href\",\"https://github.com/docker/cli/pull/1498\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure \"],[0,[5],1,\"the PR\"],[0,[],0,\" needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free and complaining feels good, but giving a damn feels better!\"]]]]}","created_at_ts":1543613635856,"created_at":"2018-11-30T21:33:55.000Z"},{"id":"5c01ad2491f04500c0db7029","post_id":"5bdb70a9b4b47100bf06b8a5","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]],[\"a\",[\"href\",\"https://www.zandermackie.com/give-a-damn/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work I was trying to merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again. \"],[0,[8],1,\"Check out the follow up\"],[0,[],0,\".\"]]]]}","created_at_ts":1543613731973,"created_at":"2018-11-30T21:35:32.000Z"},{"id":"5c05229f91f04500c0db702c","post_id":"5c05229f91f04500c0db702a","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[],\"sections\":[[1,\"p\",[[0,[],0,\"\"]]]]}","created_at_ts":1543840415839,"created_at":"2018-12-03T12:33:35.000Z"},{"id":"5c0522b391f04500c0db702d","post_id":"5c05229f91f04500c0db702a","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Cgroups\"]]],[1,\"p\",[[0,[],0,\"Namespaces\"]]],[1,\"p\",[[0,[],0,\"Seccomp\"]]],[1,\"p\",[[0,[],0,\"Etc\"]]],[1,\"p\",[[0,[],0,\"OCI image format\"]]]]}","created_at_ts":1543840435126,"created_at":"2018-12-03T12:33:55.000Z"},{"id":"5c2e00f9d5408e00c0e60d9e","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones\"]]]]}","created_at_ts":1546518777910,"created_at":"2019-01-03T12:32:57.000Z"},{"id":"5c2e00ffd5408e00c0e60d9f","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old \"]]]]}","created_at_ts":1546518783880,"created_at":"2019-01-03T12:33:03.000Z"},{"id":"5c2e010ad5408e00c0e60da0","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals\"]]]]}","created_at_ts":1546518794671,"created_at":"2019-01-03T12:33:14.000Z"},{"id":"5c2e0122d5408e00c0e60da1","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings \"]]]]}","created_at_ts":1546518818371,"created_at":"2019-01-03T12:33:38.000Z"},{"id":"5c2e013ed5408e00c0e60da2","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere \"]]]]}","created_at_ts":1546518846050,"created_at":"2019-01-03T12:34:06.000Z"},{"id":"5c2e0145d5408e00c0e60da3","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere\"]]]]}","created_at_ts":1546518853253,"created_at":"2019-01-03T12:34:13.000Z"},{"id":"5c2e014dd5408e00c0e60da4","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere and t\"]]]]}","created_at_ts":1546518861674,"created_at":"2019-01-03T12:34:21.000Z"},{"id":"5c2e0180d5408e00c0e60da5","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere with one single torch illuminating their faces and their hands, which would signal to you, oh brave developer, with a thumbs up or down, the fate of your precious code.\"]]]]}","created_at_ts":1546518912932,"created_at":"2019-01-03T12:35:12.000Z"},{"id":"5c2e01a2d5408e00c0e60da6","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere with one single torch illuminating their faces and their hands, which would signal to you, oh brave developer, with a thumbs up or down, the fate of your precious code. \"]]]]}","created_at_ts":1546518946932,"created_at":"2019-01-03T12:35:46.000Z"},{"id":"5c2e01cdd5408e00c0e60da7","post_id":"5b7071b1d72f9500bf10c992","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere with one single torch illuminating their faces and their hands, which would signal to you, oh brave developer, with a thumbs up or down, the fate of your precious code. Perhaps this primordial \"],[0,[1],1,\"Security\"],[0,[],0,\" scene is what drives our fear now\"]]]]}","created_at_ts":1546518989629,"created_at":"2019-01-03T12:36:29.000Z"}],"permissions":[{"id":"5af0dd34fbe06b0018960680","name":"Export database","object_type":"db","action_type":"exportContent","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960681","name":"Import database","object_type":"db","action_type":"importContent","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960682","name":"Delete all content","object_type":"db","action_type":"deleteAllContent","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960683","name":"Send mail","object_type":"mail","action_type":"send","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960684","name":"Browse notifications","object_type":"notification","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960685","name":"Add notifications","object_type":"notification","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960686","name":"Delete notifications","object_type":"notification","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960687","name":"Browse posts","object_type":"post","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960688","name":"Read posts","object_type":"post","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960689","name":"Edit posts","object_type":"post","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896068a","name":"Add posts","object_type":"post","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896068b","name":"Delete posts","object_type":"post","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896068c","name":"Browse settings","object_type":"setting","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896068d","name":"Read settings","object_type":"setting","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896068e","name":"Edit settings","object_type":"setting","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896068f","name":"Generate slugs","object_type":"slug","action_type":"generate","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960690","name":"Browse tags","object_type":"tag","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960691","name":"Read tags","object_type":"tag","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960692","name":"Edit tags","object_type":"tag","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960693","name":"Add tags","object_type":"tag","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960694","name":"Delete tags","object_type":"tag","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960695","name":"Browse themes","object_type":"theme","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960696","name":"Edit themes","object_type":"theme","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960697","name":"Activate themes","object_type":"theme","action_type":"activate","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960698","name":"Upload themes","object_type":"theme","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b0018960699","name":"Download themes","object_type":"theme","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896069a","name":"Delete themes","object_type":"theme","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896069b","name":"Browse users","object_type":"user","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896069c","name":"Read users","object_type":"user","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896069d","name":"Edit users","object_type":"user","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896069e","name":"Add users","object_type":"user","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896069f","name":"Delete users","object_type":"user","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a0","name":"Assign a role","object_type":"role","action_type":"assign","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a1","name":"Browse roles","object_type":"role","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a2","name":"Browse clients","object_type":"client","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a3","name":"Read clients","object_type":"client","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a4","name":"Edit clients","object_type":"client","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a5","name":"Add clients","object_type":"client","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a6","name":"Delete clients","object_type":"client","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a7","name":"Browse subscribers","object_type":"subscriber","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a8","name":"Read subscribers","object_type":"subscriber","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606a9","name":"Edit subscribers","object_type":"subscriber","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606aa","name":"Add subscribers","object_type":"subscriber","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606ab","name":"Delete subscribers","object_type":"subscriber","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606ac","name":"Browse invites","object_type":"invite","action_type":"browse","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606ad","name":"Read invites","object_type":"invite","action_type":"read","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606ae","name":"Edit invites","object_type":"invite","action_type":"edit","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606af","name":"Add invites","object_type":"invite","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606b0","name":"Delete invites","object_type":"invite","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606b1","name":"Download redirects","object_type":"redirect","action_type":"download","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606b2","name":"Upload redirects","object_type":"redirect","action_type":"upload","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606b3","name":"Add webhooks","object_type":"webhook","action_type":"add","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b00189606b4","name":"Delete webhooks","object_type":"webhook","action_type":"destroy","object_id":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5bb7755855369e00b5d0d7a6","name":"Browse integrations","object_type":"integration","action_type":"browse","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7a7","name":"Browse API keys","object_type":"api_key","action_type":"browse","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7a8","name":"Read integrations","object_type":"integration","action_type":"read","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7a9","name":"Read API keys","object_type":"api_key","action_type":"read","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7aa","name":"Edit integrations","object_type":"integration","action_type":"edit","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7ab","name":"Edit API keys","object_type":"api_key","action_type":"edit","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7ac","name":"Add integrations","object_type":"integration","action_type":"add","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7ad","name":"Add API keys","object_type":"api_key","action_type":"add","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7ae","name":"Delete integrations","object_type":"integration","action_type":"destroy","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bb7755855369e00b5d0d7af","name":"Delete API keys","object_type":"api_key","action_type":"destroy","object_id":null,"created_at":"2018-10-05T14:29:44.000Z","updated_at":"2018-10-05T14:29:44.000Z"},{"id":"5bd204de67cbd000b5210187","name":"Edit webhooks","object_type":"webhook","action_type":"edit","object_id":null,"created_at":"2018-10-25T18:01:02.000Z","updated_at":"2018-10-25T18:01:02.000Z"},{"id":"5c5d6b0781b37700c1fd45f4","name":"Browse Actions","object_type":"action","action_type":"browse","object_id":null,"created_at":"2019-02-08T11:41:59.000Z","updated_at":"2019-02-08T11:41:59.000Z"}],"permissions_apps":[],"permissions_roles":[{"id":"5af0dd36fbe06b00189606c4","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960680"},{"id":"5af0dd36fbe06b00189606c5","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960681"},{"id":"5af0dd36fbe06b00189606c6","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960682"},{"id":"5af0dd36fbe06b00189606c7","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960683"},{"id":"5af0dd36fbe06b00189606c8","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960684"},{"id":"5af0dd36fbe06b00189606c9","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960685"},{"id":"5af0dd36fbe06b00189606ca","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960686"},{"id":"5af0dd36fbe06b00189606cb","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960687"},{"id":"5af0dd36fbe06b00189606cc","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960688"},{"id":"5af0dd36fbe06b00189606cd","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960689"},{"id":"5af0dd36fbe06b00189606ce","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896068a"},{"id":"5af0dd36fbe06b00189606cf","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896068b"},{"id":"5af0dd36fbe06b00189606d0","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896068c"},{"id":"5af0dd36fbe06b00189606d1","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896068d"},{"id":"5af0dd36fbe06b00189606d2","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896068e"},{"id":"5af0dd36fbe06b00189606d3","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896068f"},{"id":"5af0dd36fbe06b00189606d4","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960690"},{"id":"5af0dd36fbe06b00189606d5","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960691"},{"id":"5af0dd36fbe06b00189606d6","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960692"},{"id":"5af0dd36fbe06b00189606d7","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960693"},{"id":"5af0dd36fbe06b00189606d8","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960694"},{"id":"5af0dd36fbe06b00189606d9","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960695"},{"id":"5af0dd36fbe06b00189606da","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960696"},{"id":"5af0dd36fbe06b00189606db","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960697"},{"id":"5af0dd36fbe06b00189606dc","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960698"},{"id":"5af0dd36fbe06b00189606dd","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b0018960699"},{"id":"5af0dd36fbe06b00189606de","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896069a"},{"id":"5af0dd36fbe06b00189606df","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896069b"},{"id":"5af0dd36fbe06b00189606e0","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896069c"},{"id":"5af0dd36fbe06b00189606e1","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896069d"},{"id":"5af0dd36fbe06b00189606e2","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896069e"},{"id":"5af0dd36fbe06b00189606e3","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b001896069f"},{"id":"5af0dd36fbe06b00189606e4","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a0"},{"id":"5af0dd36fbe06b00189606e5","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a1"},{"id":"5af0dd36fbe06b00189606e6","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a2"},{"id":"5af0dd36fbe06b00189606e7","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a3"},{"id":"5af0dd36fbe06b00189606e8","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a4"},{"id":"5af0dd36fbe06b00189606e9","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a5"},{"id":"5af0dd36fbe06b00189606ea","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a6"},{"id":"5af0dd36fbe06b00189606eb","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a7"},{"id":"5af0dd36fbe06b00189606ec","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a8"},{"id":"5af0dd36fbe06b00189606ed","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606a9"},{"id":"5af0dd36fbe06b00189606ee","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606aa"},{"id":"5af0dd36fbe06b00189606ef","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606ab"},{"id":"5af0dd36fbe06b00189606f0","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606ac"},{"id":"5af0dd36fbe06b00189606f1","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606ad"},{"id":"5af0dd36fbe06b00189606f2","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606ae"},{"id":"5af0dd36fbe06b00189606f3","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606af"},{"id":"5af0dd36fbe06b00189606f4","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606b0"},{"id":"5af0dd36fbe06b00189606f5","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606b1"},{"id":"5af0dd36fbe06b00189606f6","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606b2"},{"id":"5af0dd36fbe06b00189606f7","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606b3"},{"id":"5af0dd36fbe06b00189606f8","role_id":"5af0dd34fbe06b001896067b","permission_id":"5af0dd34fbe06b00189606b4"},{"id":"5af0dd36fbe06b00189606f9","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960687"},{"id":"5af0dd36fbe06b00189606fa","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960688"},{"id":"5af0dd36fbe06b00189606fb","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960689"},{"id":"5af0dd36fbe06b00189606fc","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896068a"},{"id":"5af0dd36fbe06b00189606fd","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896068b"},{"id":"5af0dd36fbe06b00189606fe","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896068c"},{"id":"5af0dd36fbe06b00189606ff","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896068d"},{"id":"5af0dd36fbe06b0018960700","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896068f"},{"id":"5af0dd36fbe06b0018960701","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960690"},{"id":"5af0dd36fbe06b0018960702","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960691"},{"id":"5af0dd36fbe06b0018960703","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960692"},{"id":"5af0dd36fbe06b0018960704","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960693"},{"id":"5af0dd36fbe06b0018960705","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960694"},{"id":"5af0dd36fbe06b0018960706","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896069b"},{"id":"5af0dd36fbe06b0018960707","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896069c"},{"id":"5af0dd36fbe06b0018960708","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896069d"},{"id":"5af0dd36fbe06b0018960709","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896069e"},{"id":"5af0dd36fbe06b001896070a","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b001896069f"},{"id":"5af0dd36fbe06b001896070b","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a0"},{"id":"5af0dd36fbe06b001896070c","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a1"},{"id":"5af0dd36fbe06b001896070d","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a2"},{"id":"5af0dd36fbe06b001896070e","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a3"},{"id":"5af0dd36fbe06b001896070f","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a4"},{"id":"5af0dd36fbe06b0018960710","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a5"},{"id":"5af0dd36fbe06b0018960711","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606a6"},{"id":"5af0dd36fbe06b0018960712","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606aa"},{"id":"5af0dd36fbe06b0018960713","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606ac"},{"id":"5af0dd36fbe06b0018960714","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606ad"},{"id":"5af0dd36fbe06b0018960715","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606ae"},{"id":"5af0dd36fbe06b0018960716","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606af"},{"id":"5af0dd36fbe06b0018960717","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b00189606b0"},{"id":"5af0dd36fbe06b0018960718","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960695"},{"id":"5af0dd36fbe06b0018960719","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b0018960687"},{"id":"5af0dd36fbe06b001896071a","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b0018960688"},{"id":"5af0dd36fbe06b001896071b","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b001896068a"},{"id":"5af0dd36fbe06b001896071c","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b001896068c"},{"id":"5af0dd36fbe06b001896071d","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b001896068d"},{"id":"5af0dd36fbe06b001896071e","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b001896068f"},{"id":"5af0dd36fbe06b001896071f","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b0018960690"},{"id":"5af0dd36fbe06b0018960720","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b0018960691"},{"id":"5af0dd36fbe06b0018960721","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b0018960693"},{"id":"5af0dd36fbe06b0018960722","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b001896069b"},{"id":"5af0dd36fbe06b0018960723","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b001896069c"},{"id":"5af0dd36fbe06b0018960724","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606a1"},{"id":"5af0dd36fbe06b0018960725","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606a2"},{"id":"5af0dd36fbe06b0018960726","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606a3"},{"id":"5af0dd36fbe06b0018960727","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606a4"},{"id":"5af0dd36fbe06b0018960728","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606a5"},{"id":"5af0dd36fbe06b0018960729","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606a6"},{"id":"5af0dd36fbe06b001896072a","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b00189606aa"},{"id":"5af0dd36fbe06b001896072b","role_id":"5af0dd34fbe06b001896067d","permission_id":"5af0dd34fbe06b0018960695"},{"id":"5af0dd36fbe06b001896072c","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b0018960687"},{"id":"5af0dd36fbe06b001896072d","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b0018960688"},{"id":"5af0dd36fbe06b001896072e","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b001896068a"},{"id":"5af0dd36fbe06b001896072f","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b001896068c"},{"id":"5af0dd36fbe06b0018960730","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b001896068d"},{"id":"5af0dd36fbe06b0018960731","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b001896068f"},{"id":"5af0dd36fbe06b0018960732","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b0018960690"},{"id":"5af0dd36fbe06b0018960733","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b0018960691"},{"id":"5af0dd36fbe06b0018960734","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b001896069b"},{"id":"5af0dd36fbe06b0018960735","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b001896069c"},{"id":"5af0dd36fbe06b0018960736","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606a1"},{"id":"5af0dd36fbe06b0018960737","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606a2"},{"id":"5af0dd36fbe06b0018960738","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606a3"},{"id":"5af0dd36fbe06b0018960739","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606a4"},{"id":"5af0dd36fbe06b001896073a","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606a5"},{"id":"5af0dd36fbe06b001896073b","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606a6"},{"id":"5af0dd36fbe06b001896073c","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b00189606aa"},{"id":"5af0dd36fbe06b001896073d","role_id":"5af0dd34fbe06b001896067e","permission_id":"5af0dd34fbe06b0018960695"},{"id":"5bb7755855369e00b5d0d774","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960683"},{"id":"5bb7755855369e00b5d0d775","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960684"},{"id":"5bb7755855369e00b5d0d776","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960685"},{"id":"5bb7755855369e00b5d0d777","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960686"},{"id":"5bb7755855369e00b5d0d778","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960687"},{"id":"5bb7755855369e00b5d0d779","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960688"},{"id":"5bb7755855369e00b5d0d77a","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960689"},{"id":"5bb7755855369e00b5d0d77b","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896068a"},{"id":"5bb7755855369e00b5d0d77c","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896068b"},{"id":"5bb7755855369e00b5d0d77d","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896068c"},{"id":"5bb7755855369e00b5d0d77e","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896068d"},{"id":"5bb7755855369e00b5d0d77f","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896068e"},{"id":"5bb7755855369e00b5d0d780","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896068f"},{"id":"5bb7755855369e00b5d0d781","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960690"},{"id":"5bb7755855369e00b5d0d782","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960691"},{"id":"5bb7755855369e00b5d0d783","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960692"},{"id":"5bb7755855369e00b5d0d784","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960693"},{"id":"5bb7755855369e00b5d0d785","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960694"},{"id":"5bb7755855369e00b5d0d786","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960695"},{"id":"5bb7755855369e00b5d0d787","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960696"},{"id":"5bb7755855369e00b5d0d788","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960697"},{"id":"5bb7755855369e00b5d0d789","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960698"},{"id":"5bb7755855369e00b5d0d78a","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b0018960699"},{"id":"5bb7755855369e00b5d0d78b","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896069a"},{"id":"5bb7755855369e00b5d0d78c","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896069b"},{"id":"5bb7755855369e00b5d0d78d","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896069c"},{"id":"5bb7755855369e00b5d0d78e","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896069d"},{"id":"5bb7755855369e00b5d0d78f","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896069e"},{"id":"5bb7755855369e00b5d0d790","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b001896069f"},{"id":"5bb7755855369e00b5d0d791","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a0"},{"id":"5bb7755855369e00b5d0d792","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a1"},{"id":"5bb7755855369e00b5d0d793","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a2"},{"id":"5bb7755855369e00b5d0d794","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a3"},{"id":"5bb7755855369e00b5d0d795","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a4"},{"id":"5bb7755855369e00b5d0d796","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a5"},{"id":"5bb7755855369e00b5d0d797","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a6"},{"id":"5bb7755855369e00b5d0d798","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a7"},{"id":"5bb7755855369e00b5d0d799","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a8"},{"id":"5bb7755855369e00b5d0d79a","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606a9"},{"id":"5bb7755855369e00b5d0d79b","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606aa"},{"id":"5bb7755855369e00b5d0d79c","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606ab"},{"id":"5bb7755855369e00b5d0d79d","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606ac"},{"id":"5bb7755855369e00b5d0d79e","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606ad"},{"id":"5bb7755855369e00b5d0d79f","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606ae"},{"id":"5bb7755855369e00b5d0d7a0","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606af"},{"id":"5bb7755855369e00b5d0d7a1","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606b0"},{"id":"5bb7755855369e00b5d0d7a2","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606b1"},{"id":"5bb7755855369e00b5d0d7a3","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606b2"},{"id":"5bb7755855369e00b5d0d7a4","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606b3"},{"id":"5bb7755855369e00b5d0d7a5","role_id":"5bb7755755369e00b5d0d773","permission_id":"5af0dd34fbe06b00189606b4"},{"id":"5bb7755855369e00b5d0d7b0","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7a6"},{"id":"5bb7755855369e00b5d0d7b1","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7a8"},{"id":"5bb7755855369e00b5d0d7b2","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7aa"},{"id":"5bb7755855369e00b5d0d7b3","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7ac"},{"id":"5bb7755855369e00b5d0d7b4","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7ae"},{"id":"5bb7755855369e00b5d0d7b5","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7a7"},{"id":"5bb7755855369e00b5d0d7b6","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7a9"},{"id":"5bb7755855369e00b5d0d7b7","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7ab"},{"id":"5bb7755855369e00b5d0d7b8","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7ad"},{"id":"5bb7755855369e00b5d0d7b9","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bb7755855369e00b5d0d7af"},{"id":"5bf559c36a8ee700b52445e6","role_id":"5af0dd34fbe06b001896067b","permission_id":"5bd204de67cbd000b5210187"},{"id":"5bf559c36a8ee700b52445e7","role_id":"5bb7755755369e00b5d0d773","permission_id":"5bd204de67cbd000b5210187"},{"id":"5c5d6b0781b37700c1fd45f5","role_id":"5af0dd34fbe06b001896067b","permission_id":"5c5d6b0781b37700c1fd45f4"},{"id":"5c5d6b0781b37700c1fd45f6","role_id":"5bb7755755369e00b5d0d773","permission_id":"5c5d6b0781b37700c1fd45f4"},{"id":"5cc0b774b1808a00b57d29e7","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960684"},{"id":"5cc0b774b1808a00b57d29e8","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960685"},{"id":"5cc0b774b1808a00b57d29e9","role_id":"5af0dd34fbe06b001896067c","permission_id":"5af0dd34fbe06b0018960686"}],"permissions_users":[],"posts":[{"id":"5af0deafc6b750002285a222","uuid":"11f5775f-a61e-4c50-bd8f-628edd064cd8","title":"Limits","slug":"limits","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I'm afraid to publish this post[^1], but naming things can often kill their power over you, as Ged learned of his shadow. And so it is with some trepidation that I bring you the following story:\\n\\nOne of my goals at RC was to blog every day I was there. I kept this going for a good while, but I recently fell down. For the last two weeks it's been radio silence. I have my limits, and though they aren't fixed, I struggle to accept that they're there at all. I thought I was getting better, I though I was getting stronger. And I hit a wall two weeks ago that I've been struggling to cross. Blogging stopped, I was too tired to go running or meditate, and I've had trouble programming. I've felt defeated. My depression does that; it saps me spiritually and physically.\\n\\nI was barely there for my early twenties. I've struggled with depression most of my life. And it had me fully in its grip for about 5 years. I functioned, I held jobs, had friends, I muddled on. But I was a husk. I was looking at the world through a grimey pain of glass. It pretty much sucked. \\n\\nI'm getting better now. For the past few years I've been working my way out of that grip. Therapy has been incredibly important in this fight, as has learning to accept my own limits and be kind to myself. The connection between all these things isn't necessarily obvious, so I'll elaborate a bit. Basically my depression brain sounds like this:\\n>\\\"Hmmm...you're not really meeting your goals here...maybe you should just give up? You'll never get there in any case. \\n\\nAt RC, I've been pushing myself. Its such an inspiring environment. I'm been surrounded by some of the smartest and kindest and most curious people I've ever encountered. And the standards of the community have really encouraged me to bring up my game. \\n\\nBut I also get sad (when the Winter 2's leave ) 😢. I also get tired and overwhelmed and sick. I also suffer from a sense that I'll never know what I need to know, that I'll never be a good programmer. And programming is goddamn hard and frustrating. When depression rears its head and piles on with that quiet voice - _\\\"Maybe you're having trouble because you're not smart enough to hack it. Why bother?\\\"_ - things become a really ugly mess.\\n\\n---\\nThat's what's been going on over the past couple weeks. Spending time with friends, sleeping more, and breathing fresh air have helped me a lot. I'm starting to feel better. The good news is that therapy has taught me to identify twinges of depression sooner and to accept them without giving them too much significance. My depression may never really go away, but I also know now that I can and will feel better even when it pulls me down for a bit. \\n\\n Thanks for reading.\\n \\n [^1]: I wrote this post in 2016, while attending the [Recurse Center](https://www.recurse.com/). Its a bit inside baseball, but I believe its broadly relevant, so I'm sharing it here.\"}]],\"sections\":[[10,0]]}","html":"<p>I'm afraid to publish this post<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>, but naming things can often kill their power over you, as Ged learned of his shadow. And so it is with some trepidation that I bring you the following story:</p>\n<p>One of my goals at RC was to blog every day I was there. I kept this going for a good while, but I recently fell down. For the last two weeks it's been radio silence. I have my limits, and though they aren't fixed, I struggle to accept that they're there at all. I thought I was getting better, I though I was getting stronger. And I hit a wall two weeks ago that I've been struggling to cross. Blogging stopped, I was too tired to go running or meditate, and I've had trouble programming. I've felt defeated. My depression does that; it saps me spiritually and physically.</p>\n<p>I was barely there for my early twenties. I've struggled with depression most of my life. And it had me fully in its grip for about 5 years. I functioned, I held jobs, had friends, I muddled on. But I was a husk. I was looking at the world through a grimey pain of glass. It pretty much sucked.</p>\n<p>I'm getting better now. For the past few years I've been working my way out of that grip. Therapy has been incredibly important in this fight, as has learning to accept my own limits and be kind to myself. The connection between all these things isn't necessarily obvious, so I'll elaborate a bit. Basically my depression brain sounds like this:</p>\n<blockquote>\n<p>&quot;Hmmm...you're not really meeting your goals here...maybe you should just give up? You'll never get there in any case.</p>\n</blockquote>\n<p>At RC, I've been pushing myself. Its such an inspiring environment. I'm been surrounded by some of the smartest and kindest and most curious people I've ever encountered. And the standards of the community have really encouraged me to bring up my game.</p>\n<p>But I also get sad (when the Winter 2's leave ) 😢. I also get tired and overwhelmed and sick. I also suffer from a sense that I'll never know what I need to know, that I'll never be a good programmer. And programming is goddamn hard and frustrating. When depression rears its head and piles on with that quiet voice - <em>&quot;Maybe you're having trouble because you're not smart enough to hack it. Why bother?&quot;</em> - things become a really ugly mess.</p>\n<hr>\n<p>That's what's been going on over the past couple weeks. Spending time with friends, sleeping more, and breathing fresh air have helped me a lot. I'm starting to feel better. The good news is that therapy has taught me to identify twinges of depression sooner and to accept them without giving them too much significance. My depression may never really go away, but I also know now that I can and will feel better even when it pulls me down for a bit.</p>\n<p>Thanks for reading.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>I wrote this post in 2016, while attending the <a href=\"https://www.recurse.com/\">Recurse Center</a>. Its a bit inside baseball, but I believe its broadly relevant, so I'm sharing it here. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","comment_id":"5af0deafc6b750002285a222","plaintext":"I'm afraid to publish this post[1], but naming things can often kill their power\nover you, as Ged learned of his shadow. And so it is with some trepidation that\nI bring you the following story:\n\nOne of my goals at RC was to blog every day I was there. I kept this going for a\ngood while, but I recently fell down. For the last two weeks it's been radio\nsilence. I have my limits, and though they aren't fixed, I struggle to accept\nthat they're there at all. I thought I was getting better, I though I was\ngetting stronger. And I hit a wall two weeks ago that I've been struggling to\ncross. Blogging stopped, I was too tired to go running or meditate, and I've had\ntrouble programming. I've felt defeated. My depression does that; it saps me\nspiritually and physically.\n\nI was barely there for my early twenties. I've struggled with depression most of\nmy life. And it had me fully in its grip for about 5 years. I functioned, I held\njobs, had friends, I muddled on. But I was a husk. I was looking at the world\nthrough a grimey pain of glass. It pretty much sucked.\n\nI'm getting better now. For the past few years I've been working my way out of\nthat grip. Therapy has been incredibly important in this fight, as has learning\nto accept my own limits and be kind to myself. The connection between all these\nthings isn't necessarily obvious, so I'll elaborate a bit. Basically my\ndepression brain sounds like this:\n\n\"Hmmm...you're not really meeting your goals here...maybe you should just give\nup? You'll never get there in any case.\n\nAt RC, I've been pushing myself. Its such an inspiring environment. I'm been\nsurrounded by some of the smartest and kindest and most curious people I've ever\nencountered. And the standards of the community have really encouraged me to\nbring up my game.\n\nBut I also get sad (when the Winter 2's leave ) 😢. I also get tired and\noverwhelmed and sick. I also suffer from a sense that I'll never know what I\nneed to know, that I'll never be a good programmer. And programming is goddamn\nhard and frustrating. When depression rears its head and piles on with that\nquiet voice - \"Maybe you're having trouble because you're not smart enough to\nhack it. Why bother?\"  - things become a really ugly mess.\n\n\n--------------------------------------------------------------------------------\n\nThat's what's been going on over the past couple weeks. Spending time with\nfriends, sleeping more, and breathing fresh air have helped me a lot. I'm\nstarting to feel better. The good news is that therapy has taught me to identify\ntwinges of depression sooner and to accept them without giving them too much\nsignificance. My depression may never really go away, but I also know now that I\ncan and will feel better even when it pulls me down for a bit.\n\nThanks for reading.\n\n\n--------------------------------------------------------------------------------\n\n 1. I wrote this post in 2016, while attending the Recurse Center\n    [https://www.recurse.com/]. Its a bit inside baseball, but I believe its\n    broadly relevant, so I'm sharing it here. ↩︎","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-07T23:18:07.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":"2018-05-07T23:28:00.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af0e1f9c6b750002285a224","uuid":"0574f2f3-3ea1-4a12-b2e0-2361a9415450","title":"Night & Day","slug":"night-day","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Let's open with a cliche: `What a difference a day makes`.[^1]\\n\\nYesterday was Friday. An RC batch runs M-Th for \\\"normal\\\" days, reserving Fridays for prepping for interviews and job related stuff.  The point is to bracket that time and that stress so the rest of the week we focus on programming, not job hunting. That's smart. Another example of removing the barriers to improvement.\\n\\nYesterday we did a practice interview project: spend 3 hours building a link shortener ala `bit.ly`. I had a great time hacking on some `Ruby` and I was able to build a working prototype in the time pretty handily using `Sinatra` and the `stlib`. I was quite surprised, actually, that it all came together pretty smoothly and I had time to build a few iterations, starting with something working, then improving validation of URLs and the structuring of more complicated links, then building in error messages. I even got it deployed [here](mta.lol). Basically I'd say it was a great ego boost and reminded me that I can actually program pretty well.\\n\\nThen came the rest of the day.\\n\\nI spent about three hours trying to implement a fairly straightforward algorithm (insert sort). I can't do it. I must be __stupid__, and __lazy__ to boot. I left feeling really down, discouraged, and worried about my future prospects - would I ever be able to successfully pass a whiteboard interview? \\n___\\nHere's another version of yesterday: \\n\\nI'm not stupid or lazy; evidence is entirely to the contrary and so that's a just ==useless story== I told myself. I'm a human, not the Cyborg I expect myself to be (Thanks [Kathy Sierra](https://www.youtube.com/watch?v=FKTxC9pl-WM) for making this distinction). The truth is that I'd actually woken up at 7am to go a Gov't office, spent the week getting over a cold, had trouble sleeping pretty much every night, worked very hard at learning a new language over the week, programmed an ALU, and spent that very morning programming something I cared about. Honestly I _killed_ it in the morning (I say so myself, but I'm proud of what I got done). \\n\\nAnd this morning, Saturday, I got up, looked over the code I'd stuggled with, quickly wrote some binary-tree functions in `Go` and then banged out an insert sort in `Ruby`. The difference was major.\\n\\n---\\n\\nSlowly I'm coming to honor my limits and capacities. Slowly I'm learning that effort and persistence are much more important than a given outcome over the long run (ie. can I program this algorithm in the moment, or can I work hard, learn it, and keep learning over my career). And I recognize now that I've been hampered in my life by a [fixed mindset](https://en.wikipedia.org/wiki/Carol_Dweck). Coming to this field without CS schooling, I feel pretty inadequate sometimes. But learning to program ==at all== has started to break me of that mental habit, though it still rears its ugly head.\\n\\nAt the end of the day I talked to [John](http://workmajj.com/) about my discouragement with the algorithms practice and he had this to say (_paraphrase_): \\n> Programmers as community tend to celebrate algorithmic facility, but there are lots of problems in software that have nothing to do with algorithms.\\n\\nI'm not saying I'm going to ignore that learning; to the contrary, I know that its just matter of putting in the time and I never want to be held back by a weakness in this area. But I do know that programming is a big tent and that I can find my place in it - even if writing a merge-sort doesn't yet come naturally.\\n\\n[^1]: I wrote this during my time at the [Recurse Center](www.recurse.com) and thought it was generally relevant to folks learning to code.\"}]],\"sections\":[[10,0]]}","html":"<p>Let's open with a cliche: <code>What a difference a day makes</code>.<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p>Yesterday was Friday. An RC batch runs M-Th for &quot;normal&quot; days, reserving Fridays for prepping for interviews and job related stuff.  The point is to bracket that time and that stress so the rest of the week we focus on programming, not job hunting. That's smart. Another example of removing the barriers to improvement.</p>\n<p>Yesterday we did a practice interview project: spend 3 hours building a link shortener ala <code>bit.ly</code>. I had a great time hacking on some <code>Ruby</code> and I was able to build a working prototype in the time pretty handily using <code>Sinatra</code> and the <code>stlib</code>. I was quite surprised, actually, that it all came together pretty smoothly and I had time to build a few iterations, starting with something working, then improving validation of URLs and the structuring of more complicated links, then building in error messages. I even got it deployed <a href=\"mta.lol\">here</a>. Basically I'd say it was a great ego boost and reminded me that I can actually program pretty well.</p>\n<p>Then came the rest of the day.</p>\n<p>I spent about three hours trying to implement a fairly straightforward algorithm (insert sort). I can't do it. I must be <strong>stupid</strong>, and <strong>lazy</strong> to boot. I left feeling really down, discouraged, and worried about my future prospects - would I ever be able to successfully pass a whiteboard interview?</p>\n<hr>\n<p>Here's another version of yesterday:</p>\n<p>I'm not stupid or lazy; evidence is entirely to the contrary and so that's a just <mark>useless story</mark> I told myself. I'm a human, not the Cyborg I expect myself to be (Thanks <a href=\"https://www.youtube.com/watch?v=FKTxC9pl-WM\">Kathy Sierra</a> for making this distinction). The truth is that I'd actually woken up at 7am to go a Gov't office, spent the week getting over a cold, had trouble sleeping pretty much every night, worked very hard at learning a new language over the week, programmed an ALU, and spent that very morning programming something I cared about. Honestly I <em>killed</em> it in the morning (I say so myself, but I'm proud of what I got done).</p>\n<p>And this morning, Saturday, I got up, looked over the code I'd stuggled with, quickly wrote some binary-tree functions in <code>Go</code> and then banged out an insert sort in <code>Ruby</code>. The difference was major.</p>\n<hr>\n<p>Slowly I'm coming to honor my limits and capacities. Slowly I'm learning that effort and persistence are much more important than a given outcome over the long run (ie. can I program this algorithm in the moment, or can I work hard, learn it, and keep learning over my career). And I recognize now that I've been hampered in my life by a <a href=\"https://en.wikipedia.org/wiki/Carol_Dweck\">fixed mindset</a>. Coming to this field without CS schooling, I feel pretty inadequate sometimes. But learning to program <mark>at all</mark> has started to break me of that mental habit, though it still rears its ugly head.</p>\n<p>At the end of the day I talked to <a href=\"http://workmajj.com/\">John</a> about my discouragement with the algorithms practice and he had this to say (<em>paraphrase</em>):</p>\n<blockquote>\n<p>Programmers as community tend to celebrate algorithmic facility, but there are lots of problems in software that have nothing to do with algorithms.</p>\n</blockquote>\n<p>I'm not saying I'm going to ignore that learning; to the contrary, I know that its just matter of putting in the time and I never want to be held back by a weakness in this area. But I do know that programming is a big tent and that I can find my place in it - even if writing a merge-sort doesn't yet come naturally.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>I wrote this during my time at the <a href=\"www.recurse.com\">Recurse Center</a> and thought it was generally relevant to folks learning to code. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","comment_id":"5af0e1f9c6b750002285a224","plaintext":"Let's open with a cliche: What a difference a day makes.[1]\n\nYesterday was Friday. An RC batch runs M-Th for \"normal\" days, reserving Fridays\nfor prepping for interviews and job related stuff. The point is to bracket that\ntime and that stress so the rest of the week we focus on programming, not job\nhunting. That's smart. Another example of removing the barriers to improvement.\n\nYesterday we did a practice interview project: spend 3 hours building a link\nshortener ala bit.ly. I had a great time hacking on some Ruby  and I was able to\nbuild a working prototype in the time pretty handily using Sinatra  and the \nstlib. I was quite surprised, actually, that it all came together pretty\nsmoothly and I had time to build a few iterations, starting with something\nworking, then improving validation of URLs and the structuring of more\ncomplicated links, then building in error messages. I even got it deployed here\n[mta.lol]. Basically I'd say it was a great ego boost and reminded me that I can\nactually program pretty well.\n\nThen came the rest of the day.\n\nI spent about three hours trying to implement a fairly straightforward algorithm\n(insert sort). I can't do it. I must be stupid, and lazy  to boot. I left\nfeeling really down, discouraged, and worried about my future prospects - would\nI ever be able to successfully pass a whiteboard interview?\n\n\n--------------------------------------------------------------------------------\n\nHere's another version of yesterday:\n\nI'm not stupid or lazy; evidence is entirely to the contrary and so that's a\njust useless story  I told myself. I'm a human, not the Cyborg I expect myself\nto be (Thanks Kathy Sierra [https://www.youtube.com/watch?v=FKTxC9pl-WM]  for\nmaking this distinction). The truth is that I'd actually woken up at 7am to go a\nGov't office, spent the week getting over a cold, had trouble sleeping pretty\nmuch every night, worked very hard at learning a new language over the week,\nprogrammed an ALU, and spent that very morning programming something I cared\nabout. Honestly I killed  it in the morning (I say so myself, but I'm proud of\nwhat I got done).\n\nAnd this morning, Saturday, I got up, looked over the code I'd stuggled with,\nquickly wrote some binary-tree functions in Go  and then banged out an insert\nsort in Ruby. The difference was major.\n\n\n--------------------------------------------------------------------------------\n\nSlowly I'm coming to honor my limits and capacities. Slowly I'm learning that\neffort and persistence are much more important than a given outcome over the\nlong run (ie. can I program this algorithm in the moment, or can I work hard,\nlearn it, and keep learning over my career). And I recognize now that I've been\nhampered in my life by a fixed mindset\n[https://en.wikipedia.org/wiki/Carol_Dweck]. Coming to this field without CS\nschooling, I feel pretty inadequate sometimes. But learning to program at all \nhas started to break me of that mental habit, though it still rears its ugly\nhead.\n\nAt the end of the day I talked to John [http://workmajj.com/]  about my\ndiscouragement with the algorithms practice and he had this to say (paraphrase):\n\nProgrammers as community tend to celebrate algorithmic facility, but there are\nlots of problems in software that have nothing to do with algorithms.\n\nI'm not saying I'm going to ignore that learning; to the contrary, I know that\nits just matter of putting in the time and I never want to be held back by a\nweakness in this area. But I do know that programming is a big tent and that I\ncan find my place in it - even if writing a merge-sort doesn't yet come\nnaturally.\n\n\n--------------------------------------------------------------------------------\n\n 1. I wrote this during my time at the Recurse Center [www.recurse.com]  and\n    thought it was generally relevant to folks learning to code. ↩︎","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-07T23:32:09.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":"2018-05-08T23:38:00.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af0e2a5c6b750002285a226","uuid":"1c71f01b-3204-4052-95ee-8389bceaefc5","title":"How I learned how to learn how to code","slug":"how-i-learned-how-to-code","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I was reading the Turing Omnibus, doing  some research into error correction, and I learned about Hamming Codes. I might have understood the concept at the time, but today, what I remember is the offhand comment my friend made about their creator, Richard Hamming.\\n\\n> Oh you should watch his talk \\\"You and Your Research\\\"\\n\\nAt this point in my life, I'd been laid off form my first startup and was taking a break to \\\"get better at programming\\\". My goal was vague, I admit. I loved development and I'd worked very hard to get that first job (story at a later point), but I realized about 10 months into working that I was spinning my wheels. I was learning the libraries and could hook them together, but I was playing with Duplos, mentally. I didn't have the deeper understanding of computers that gave all that library code some context. I didn't understand what it was doing at any sort of level but the most superficial. And I was aware that the world in which I was traveling was moving faster and faster, which effectively made me standing still or moving backwards[^1].\\n\\n\\\"You and Your Research\\\" is a brilliant, inspirational talk, which I've since watched many times. But I'll focus on one point Hamming makes, which hit me like a brick over the head.\\n\\n> Given two people of approximately the same ability and one person who works ten percent more than the other, the latter will more than twice outproduce the former. The more you know, the more you learn; the more you learn, the more you can do; the more you can do, the more the opportunity - it is very much like compound interest.\\n\\nHe's actually making two points here, which I'll unpack.\\n\\nFirstly, because because knowledge is compounding, knowing more is a virtuous cycle. And in terms of what you choose to learn, there's a spectrum from essentially useless to rather useful. And what I mean by useful knowledge here are things that don't really change all that quickly and things you can build on. In fact not all knowledge is actually compound useful (or maybe if its not compounding knowledge its actually just trivia :thinking_face:). Thus, you should work hard to identify knowledge that does compound.\\n\\nSo, for example, learning the latest Javascript framework du-jour or the Webpack v3 module apis, would not be useful knowledge because it will likely be obsoleted by a PR from the next boot camp grad hire at your job before you've finished this paragraph. Not to say you shouldn't learn it, but I would strongly suggest learning only as little as necessary to get your job done (_Just in Time_ learning). Instead, focus on really learning Javascript, the language. Or focus on learning *Programming Languages* in the abstract. Or focus on learning C (what a shockingly elitist thing to say 😱). Or learn assembly because you'll actually have to learn how computer work to understand what's even going on (I'll grant you that some crazy freaks will tell me that even assembly is a \\\"huge abstraction\\\" and I suppose they'd be kinda right, but who wants to have a drink with them at a party....).\\n\\nThis corpus of knowledge is generally called *serious tone* **Computer Science**, which is neither about computers nor is a science (*sic(p)*). That being said, its useful great stuff, especially if you want to stop spinning your wheels and start getting somewhere. I'll tell you that stepping of the treadmill and ambling through the dustier sections of CS in the library, picking up Olde Books (like \\\"Programming Pearls\\\" or \\\"TCP/IP Illustrated\\\") taught me things that no React tutorial ever could. This old stuff gave me, for lack of a better term, intuition. And its since proved really useful working in lots of domains, from shite frontend webapps to infrastructure to devops, from mac to linux to windows.\\n\\nNow I'm not saying that the particulars don't matter; they really do. Knowing the platforms you're working on is crucial to doing good work. But what I am saying, is that spending some time with the deeper subjects will pay dividends. Dividends in your ability to read unfamiliar languages and codebases and paradigms, dividends in your ability to debug problems, and dividends in your holistic enjoyment of your work, because you'll start of see the larger picture instead of feeling like you're constantly falling behind. That's what we mean by perspective. And I'm not there yet, but I feel like I've found the pointer to the moon.\\n\\n---\\n\\nThe other point Hamming was making in the above quote is about the virtues of drive and hard work; these are the things that it takes to succeed and do the good stuff. No substitutes for putting in the time on the **right** things, to be sure, but he's also making a deeper point about understanding the keys to success. \\n\\nI took from this that my achievements were timebound (i.e. We're going to die some day and have a limited amount of time to do something good), and so focusing on leverage (activities and process that have a multiplying effect on my knowledge, output, or impact) was essential to using that time wisely. \\n\\nOn learning: lots of smart people have studied how to more effectively learn (Barbara Oakley in particular is someone you should look up). Learning more effectively makes your time spent learning literally have a greater output. \\n\\nSpend time understanding the best resources to learn from and the experts from whom you can learn, especially those who sift, synthesize, and summarize information (Shane Parrish calls this **Mastering The Best Of What Other People Have Already Figured Out**). These people are literally doing the work for you and you should greedily take advantage of that fact. \\n\\nConstantly, ruthlessly cut wasteful activities out of your life and seek to do things more time and energy efficiently. For example, I read \\\"Body by Science\\\", thanks to a recommendation by Nassim Taleb, and saved myself untold hours of boring exercise.\\n\\nQuit social media. Do it now. You'll thank me in like three years when you realized what a head-fuck it is (admittedly I'm still on Twitter).\\n\\nI'm not arguing for a life-hacks style approach, but for simply recognizing that achievement takes great effort and sacrifice and that using your time well and making space in your life for that work are necessary and important steps along a journey of continual, steady upward progress. Take the long view and you'll see far.\\n\\n\\n\\n[^1]: This, I subsequently learned, is a Red Queen situation, well treated by [Farnam Street](https://www.fs.blog/2012/10/the-red-queen-effect/)\"}]],\"sections\":[[10,0]]}","html":"<p>I was reading the Turing Omnibus, doing  some research into error correction, and I learned about Hamming Codes. I might have understood the concept at the time, but today, what I remember is the offhand comment my friend made about their creator, Richard Hamming.</p>\n<blockquote>\n<p>Oh you should watch his talk &quot;You and Your Research&quot;</p>\n</blockquote>\n<p>At this point in my life, I'd been laid off form my first startup and was taking a break to &quot;get better at programming&quot;. My goal was vague, I admit. I loved development and I'd worked very hard to get that first job (story at a later point), but I realized about 10 months into working that I was spinning my wheels. I was learning the libraries and could hook them together, but I was playing with Duplos, mentally. I didn't have the deeper understanding of computers that gave all that library code some context. I didn't understand what it was doing at any sort of level but the most superficial. And I was aware that the world in which I was traveling was moving faster and faster, which effectively made me standing still or moving backwards<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup>.</p>\n<p>&quot;You and Your Research&quot; is a brilliant, inspirational talk, which I've since watched many times. But I'll focus on one point Hamming makes, which hit me like a brick over the head.</p>\n<blockquote>\n<p>Given two people of approximately the same ability and one person who works ten percent more than the other, the latter will more than twice outproduce the former. The more you know, the more you learn; the more you learn, the more you can do; the more you can do, the more the opportunity - it is very much like compound interest.</p>\n</blockquote>\n<p>He's actually making two points here, which I'll unpack.</p>\n<p>Firstly, because because knowledge is compounding, knowing more is a virtuous cycle. And in terms of what you choose to learn, there's a spectrum from essentially useless to rather useful. And what I mean by useful knowledge here are things that don't really change all that quickly and things you can build on. In fact not all knowledge is actually compound useful (or maybe if its not compounding knowledge its actually just trivia :thinking_face:). Thus, you should work hard to identify knowledge that does compound.</p>\n<p>So, for example, learning the latest Javascript framework du-jour or the Webpack v3 module apis, would not be useful knowledge because it will likely be obsoleted by a PR from the next boot camp grad hire at your job before you've finished this paragraph. Not to say you shouldn't learn it, but I would strongly suggest learning only as little as necessary to get your job done (<em>Just in Time</em> learning). Instead, focus on really learning Javascript, the language. Or focus on learning <em>Programming Languages</em> in the abstract. Or focus on learning C (what a shockingly elitist thing to say 😱). Or learn assembly because you'll actually have to learn how computer work to understand what's even going on (I'll grant you that some crazy freaks will tell me that even assembly is a &quot;huge abstraction&quot; and I suppose they'd be kinda right, but who wants to have a drink with them at a party....).</p>\n<p>This corpus of knowledge is generally called <em>serious tone</em> <strong>Computer Science</strong>, which is neither about computers nor is a science (<em>sic(p)</em>). That being said, its useful great stuff, especially if you want to stop spinning your wheels and start getting somewhere. I'll tell you that stepping of the treadmill and ambling through the dustier sections of CS in the library, picking up Olde Books (like &quot;Programming Pearls&quot; or &quot;TCP/IP Illustrated&quot;) taught me things that no React tutorial ever could. This old stuff gave me, for lack of a better term, intuition. And its since proved really useful working in lots of domains, from shite frontend webapps to infrastructure to devops, from mac to linux to windows.</p>\n<p>Now I'm not saying that the particulars don't matter; they really do. Knowing the platforms you're working on is crucial to doing good work. But what I am saying, is that spending some time with the deeper subjects will pay dividends. Dividends in your ability to read unfamiliar languages and codebases and paradigms, dividends in your ability to debug problems, and dividends in your holistic enjoyment of your work, because you'll start of see the larger picture instead of feeling like you're constantly falling behind. That's what we mean by perspective. And I'm not there yet, but I feel like I've found the pointer to the moon.</p>\n<hr>\n<p>The other point Hamming was making in the above quote is about the virtues of drive and hard work; these are the things that it takes to succeed and do the good stuff. No substitutes for putting in the time on the <strong>right</strong> things, to be sure, but he's also making a deeper point about understanding the keys to success.</p>\n<p>I took from this that my achievements were timebound (i.e. We're going to die some day and have a limited amount of time to do something good), and so focusing on leverage (activities and process that have a multiplying effect on my knowledge, output, or impact) was essential to using that time wisely.</p>\n<p>On learning: lots of smart people have studied how to more effectively learn (Barbara Oakley in particular is someone you should look up). Learning more effectively makes your time spent learning literally have a greater output.</p>\n<p>Spend time understanding the best resources to learn from and the experts from whom you can learn, especially those who sift, synthesize, and summarize information (Shane Parrish calls this <strong>Mastering The Best Of What Other People Have Already Figured Out</strong>). These people are literally doing the work for you and you should greedily take advantage of that fact.</p>\n<p>Constantly, ruthlessly cut wasteful activities out of your life and seek to do things more time and energy efficiently. For example, I read &quot;Body by Science&quot;, thanks to a recommendation by Nassim Taleb, and saved myself untold hours of boring exercise.</p>\n<p>Quit social media. Do it now. You'll thank me in like three years when you realized what a head-fuck it is (admittedly I'm still on Twitter).</p>\n<p>I'm not arguing for a life-hacks style approach, but for simply recognizing that achievement takes great effort and sacrifice and that using your time well and making space in your life for that work are necessary and important steps along a journey of continual, steady upward progress. Take the long view and you'll see far.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>This, I subsequently learned, is a Red Queen situation, well treated by <a href=\"https://www.fs.blog/2012/10/the-red-queen-effect/\">Farnam Street</a> <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","comment_id":"5af0e2a5c6b750002285a226","plaintext":"I was reading the Turing Omnibus, doing some research into error correction, and\nI learned about Hamming Codes. I might have understood the concept at the time,\nbut today, what I remember is the offhand comment my friend made about their\ncreator, Richard Hamming.\n\nOh you should watch his talk \"You and Your Research\"\n\nAt this point in my life, I'd been laid off form my first startup and was taking\na break to \"get better at programming\". My goal was vague, I admit. I loved\ndevelopment and I'd worked very hard to get that first job (story at a later\npoint), but I realized about 10 months into working that I was spinning my\nwheels. I was learning the libraries and could hook them together, but I was\nplaying with Duplos, mentally. I didn't have the deeper understanding of\ncomputers that gave all that library code some context. I didn't understand what\nit was doing at any sort of level but the most superficial. And I was aware that\nthe world in which I was traveling was moving faster and faster, which\neffectively made me standing still or moving backwards[1].\n\n\"You and Your Research\" is a brilliant, inspirational talk, which I've since\nwatched many times. But I'll focus on one point Hamming makes, which hit me like\na brick over the head.\n\nGiven two people of approximately the same ability and one person who works ten\npercent more than the other, the latter will more than twice outproduce the\nformer. The more you know, the more you learn; the more you learn, the more you\ncan do; the more you can do, the more the opportunity - it is very much like\ncompound interest.\n\nHe's actually making two points here, which I'll unpack.\n\nFirstly, because because knowledge is compounding, knowing more is a virtuous\ncycle. And in terms of what you choose to learn, there's a spectrum from\nessentially useless to rather useful. And what I mean by useful knowledge here\nare things that don't really change all that quickly and things you can build\non. In fact not all knowledge is actually compound useful (or maybe if its not\ncompounding knowledge its actually just trivia :thinking_face:). Thus, you\nshould work hard to identify knowledge that does compound.\n\nSo, for example, learning the latest Javascript framework du-jour or the Webpack\nv3 module apis, would not be useful knowledge because it will likely be\nobsoleted by a PR from the next boot camp grad hire at your job before you've\nfinished this paragraph. Not to say you shouldn't learn it, but I would strongly\nsuggest learning only as little as necessary to get your job done (Just in Time \nlearning). Instead, focus on really learning Javascript, the language. Or focus\non learning Programming Languages  in the abstract. Or focus on learning C (what\na shockingly elitist thing to say 😱). Or learn assembly because you'll actually\nhave to learn how computer work to understand what's even going on (I'll grant\nyou that some crazy freaks will tell me that even assembly is a \"huge\nabstraction\" and I suppose they'd be kinda right, but who wants to have a drink\nwith them at a party....).\n\nThis corpus of knowledge is generally called serious tone  Computer Science,\nwhich is neither about computers nor is a science (sic(p)). That being said, its\nuseful great stuff, especially if you want to stop spinning your wheels and\nstart getting somewhere. I'll tell you that stepping of the treadmill and\nambling through the dustier sections of CS in the library, picking up Olde Books\n(like \"Programming Pearls\" or \"TCP/IP Illustrated\") taught me things that no\nReact tutorial ever could. This old stuff gave me, for lack of a better term,\nintuition. And its since proved really useful working in lots of domains, from\nshite frontend webapps to infrastructure to devops, from mac to linux to\nwindows.\n\nNow I'm not saying that the particulars don't matter; they really do. Knowing\nthe platforms you're working on is crucial to doing good work. But what I am\nsaying, is that spending some time with the deeper subjects will pay dividends.\nDividends in your ability to read unfamiliar languages and codebases and\nparadigms, dividends in your ability to debug problems, and dividends in your\nholistic enjoyment of your work, because you'll start of see the larger picture\ninstead of feeling like you're constantly falling behind. That's what we mean by\nperspective. And I'm not there yet, but I feel like I've found the pointer to\nthe moon.\n\n\n--------------------------------------------------------------------------------\n\nThe other point Hamming was making in the above quote is about the virtues of\ndrive and hard work; these are the things that it takes to succeed and do the\ngood stuff. No substitutes for putting in the time on the right  things, to be\nsure, but he's also making a deeper point about understanding the keys to\nsuccess.\n\nI took from this that my achievements were timebound (i.e. We're going to die\nsome day and have a limited amount of time to do something good), and so\nfocusing on leverage (activities and process that have a multiplying effect on\nmy knowledge, output, or impact) was essential to using that time wisely.\n\nOn learning: lots of smart people have studied how to more effectively learn\n(Barbara Oakley in particular is someone you should look up). Learning more\neffectively makes your time spent learning literally have a greater output.\n\nSpend time understanding the best resources to learn from and the experts from\nwhom you can learn, especially those who sift, synthesize, and summarize\ninformation (Shane Parrish calls this Mastering The Best Of What Other People\nHave Already Figured Out). These people are literally doing the work for you and\nyou should greedily take advantage of that fact.\n\nConstantly, ruthlessly cut wasteful activities out of your life and seek to do\nthings more time and energy efficiently. For example, I read \"Body by Science\",\nthanks to a recommendation by Nassim Taleb, and saved myself untold hours of\nboring exercise.\n\nQuit social media. Do it now. You'll thank me in like three years when you\nrealized what a head-fuck it is (admittedly I'm still on Twitter).\n\nI'm not arguing for a life-hacks style approach, but for simply recognizing that\nachievement takes great effort and sacrifice and that using your time well and\nmaking space in your life for that work are necessary and important steps along\na journey of continual, steady upward progress. Take the long view and you'll\nsee far.\n\n\n--------------------------------------------------------------------------------\n\n 1. This, I subsequently learned, is a Red Queen situation, well treated by \n    Farnam Street [https://www.fs.blog/2012/10/the-red-queen-effect/]  ↩︎","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-07T23:35:01.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":"2018-05-23T17:26:20.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af0e2d0c6b750002285a228","uuid":"44776de4-fdeb-4b58-80f1-ca84a06ee2b3","title":"I am security and so can you","slug":"i-am-security-and-so-can-you","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"></div>","comment_id":"5af0e2d0c6b750002285a228","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-07T23:35:44.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af0e8bcc6b750002285a22a","uuid":"992d1ed7-881f-492d-b144-40af17b66412","title":"Important Problems","slug":"important-problems","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Richard Hamming asked the chemists in the Bell Labs Cafeteria:\\n\\n> What are the most important problems in your field? And why aren't you working on them?\\n\\nThe ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them? \\n\\nIn technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.\\n\\n>“The best minds of my generation are thinking about how to make people click ads.”\\n\\nAnd so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?\\n\\nI don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way? \\n\\nCertainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with [the help of a blacksmith](http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html) (I literally googled \\\"how to learn how to code\\\" and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be a chef instead of a cook. Or else why bother? And so for now, I have an important problem: I have to actually _find_ the important problems. I'll let you know when I figure them out.\\n\\n\"}]],\"markups\":[],\"sections\":[[10,0]]}","html":"<p>Richard Hamming asked the chemists in the Bell Labs Cafeteria:</p>\n<blockquote>\n<p>What are the most important problems in your field? And why aren't you working on them?</p>\n</blockquote>\n<p>The ever brilliant Haroon Meer got me thinking about this question recently; what are the important problems these days? And why aren't I working on them?</p>\n<p>In technology, so much seems driven by the market, advertising, and hype. I suppose that's better than war being the engine, but it somehow seems hollow. Technology itself seems to advance for its own sake and pure exploration can be exciting, as in science. But has that really happened much after the PARC days? I don't really think so.</p>\n<blockquote>\n<p>“The best minds of my generation are thinking about how to make people click ads.”</p>\n</blockquote>\n<p>And so what's a person to do? It certainly seems that the most important problems facing humanity are tied up with technology: Can technology extricate us from the downward spiral of climate change and environmental degradation? Can online communities and governance models enabled by pervasive communication technology preserve or foster democracy in some meaningful sense, or will they simpy sow the seeds of its own destruction? Can technology help people find a new sense of meaning outside of the natural communities and bonds it has had some part in severing or will it doom us to a hyper-connection devoid of any substance?</p>\n<p>I don't have answers to these questions; I don't actually think I (or my fellow programmers) am equipped to adress these issue (certainly not on my own). But its certainly incumbent upon us to engage with the meaning and impact of our work. And maybe that engagement, in itself, is a grainule of an important problem: How can software engineers minimize the harm their work produces and how can they produce that work in a minimully harmful way?</p>\n<p>Certainly having job that helps me support a family is deeply meaningful; and working at a company that share some of my values or at least seems to minimally cut against my grain is a start. And maybe that's okay for now. I'm a bit over 3.5 years into a career in software; I taught myself to do this with <a href=\"http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html\">the help of a blacksmith</a> (I literally googled &quot;how to learn how to code&quot; and just followed his advice). And even though I beat up on myself, if I'm honest I feel like I'm progressing at an acceptable trajectory. But I want to ultimately do high impact work in this field or, as someone so aptly put it, be a chef instead of a cook. Or else why bother? And so for now, I have an important problem: I have to actually <em>find</em> the important problems. I'll let you know when I figure them out.</p>\n","comment_id":"5af0e8bcc6b750002285a22a","plaintext":"Richard Hamming asked the chemists in the Bell Labs Cafeteria:\n\nWhat are the most important problems in your field? And why aren't you working\non them?\n\nThe ever brilliant Haroon Meer got me thinking about this question recently;\nwhat are the important problems these days? And why aren't I working on them?\n\nIn technology, so much seems driven by the market, advertising, and hype. I\nsuppose that's better than war being the engine, but it somehow seems hollow.\nTechnology itself seems to advance for its own sake and pure exploration can be\nexciting, as in science. But has that really happened much after the PARC days?\nI don't really think so.\n\n“The best minds of my generation are thinking about how to make people click\nads.”\n\nAnd so what's a person to do? It certainly seems that the most important\nproblems facing humanity are tied up with technology: Can technology extricate\nus from the downward spiral of climate change and environmental degradation? Can\nonline communities and governance models enabled by pervasive communication\ntechnology preserve or foster democracy in some meaningful sense, or will they\nsimpy sow the seeds of its own destruction? Can technology help people find a\nnew sense of meaning outside of the natural communities and bonds it has had\nsome part in severing or will it doom us to a hyper-connection devoid of any\nsubstance?\n\nI don't have answers to these questions; I don't actually think I (or my fellow\nprogrammers) am equipped to adress these issue (certainly not on my own). But\nits certainly incumbent upon us to engage with the meaning and impact of our\nwork. And maybe that engagement, in itself, is a grainule of an important\nproblem: How can software engineers minimize the harm their work produces and\nhow can they produce that work in a minimully harmful way?\n\nCertainly having job that helps me support a family is deeply meaningful; and\nworking at a company that share some of my values or at least seems to minimally\ncut against my grain is a start. And maybe that's okay for now. I'm a bit over\n3.5 years into a career in software; I taught myself to do this with the help\nof\na blacksmith\n[http://joshuakemp.blogspot.com/2013/11/how-blacksmith-learned-to-code-and-9.html] \n (I literally googled \"how to learn how to code\" and just followed his advice).\nAnd even though I beat up on myself, if I'm honest I feel like I'm progressing\nat an acceptable trajectory. But I want to ultimately do high impact work in\nthis field or, as someone so aptly put it, be a chef instead of a cook. Or else\nwhy bother? And so for now, I have an important problem: I have to actually find \n the important problems. I'll let you know when I figure them out.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-08T00:01:00.000Z","updated_at":"2018-11-13T22:41:41.000Z","published_at":"2018-10-21T01:54:19.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af0f9bdc6b750002285a22c","uuid":"e52671ea-216c-48b6-84f1-366bc905068e","title":"About","slug":"about","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"I'm Zander Mackie. I work in tech, on cloud stuff and security, but I'm more interested in people and bugs than bits. I want to be Dan Geer when I grow up. \\n\\nIn past lives, I studied music with monks in mountains, crafted cave-aged cheese, and edited evil advertisments. You could say I've seen a lot. I don't know if I'm old, wise, and sad yet, but I've got some grey hairs to prove it.\"}]],\"sections\":[[10,0]]}","html":"<p>I'm Zander Mackie. I work in tech, on cloud stuff and security, but I'm more interested in people and bugs than bits. I want to be Dan Geer when I grow up.</p>\n<p>In past lives, I studied music with monks in mountains, crafted cave-aged cheese, and edited evil advertisments. You could say I've seen a lot. I don't know if I'm old, wise, and sad yet, but I've got some grey hairs to prove it.</p>\n","comment_id":"5af0f9bdc6b750002285a22c","plaintext":"I'm Zander Mackie. I work in tech, on cloud stuff and security, but I'm more\ninterested in people and bugs than bits. I want to be Dan Geer when I grow up.\n\nIn past lives, I studied music with monks in mountains, crafted cave-aged\ncheese, and edited evil advertisments. You could say I've seen a lot. I don't\nknow if I'm old, wise, and sad yet, but I've got some grey hairs to prove it.","feature_image":null,"featured":0,"page":1,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-08T01:13:33.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":"2018-05-08T01:24:39.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af0fcc2c6b750002285a22e","uuid":"c5baddf1-5914-4681-a302-82436feec378","title":"Constraints","slug":"constraints","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"Artists are famously driven by cons\"}]],\"sections\":[[10,0]]}","html":"<p>Artists are famously driven by cons</p>\n","comment_id":"5af0fcc2c6b750002285a22e","plaintext":"Artists are famously driven by cons","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-08T01:26:26.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5af9c04424a9e500bf9c8a43","uuid":"9e36ce7d-7a12-4dd8-9b65-b1fab1e96a22","title":"Stuff you might want to learn if...","slug":"stuff-you-might-want-to-learn","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"** ..you work with computers:\\nHow your brain works\\nHow to make decisions\\n[How to learn](https://www.coursera.org/learn/learning-how-to-learn)\\n[How to be effective](https://www.youtube.com/watch?v=QXN35r2_20s)\\nGood things other people have already figured out\\n\\n\\n** ..you work with other people in technology\\n\\nHow computers work:\\n- From nand to tetris (book + coursera)\\n- Computer systems: a programmers perspective\\n- GDB: https://beej.us/guide/bggdb/\\n- Assembly vidoes: https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe\\n\\nNetworking:\\n - TCP/IP illustrated, vol. 1\\n - Some videos\\n - wireshark\"}]],\"markups\":[],\"sections\":[[10,0]]}","html":"<p>** ..you work with computers:<br>\nHow your brain works<br>\nHow to make decisions<br>\n<a href=\"https://www.coursera.org/learn/learning-how-to-learn\">How to learn</a><br>\n<a href=\"https://www.youtube.com/watch?v=QXN35r2_20s\">How to be effective</a><br>\nGood things other people have already figured out</p>\n<p>** ..you work with other people in technology</p>\n<p>How computers work:</p>\n<ul>\n<li>From nand to tetris (book + coursera)</li>\n<li>Computer systems: a programmers perspective</li>\n<li>GDB: <a href=\"https://beej.us/guide/bggdb/\">https://beej.us/guide/bggdb/</a></li>\n<li>Assembly vidoes: <a href=\"https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe\">https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe</a></li>\n</ul>\n<p>Networking:</p>\n<ul>\n<li>TCP/IP illustrated, vol. 1</li>\n<li>Some videos</li>\n<li>wireshark</li>\n</ul>\n","comment_id":"5af9c04424a9e500bf9c8a43","plaintext":"** ..you work with computers:\nHow your brain works\nHow to make decisions\nHow to learn [https://www.coursera.org/learn/learning-how-to-learn]\nHow to be effective [https://www.youtube.com/watch?v=QXN35r2_20s]\nGood things other people have already figured out\n\n** ..you work with other people in technology\n\nHow computers work:\n\n * From nand to tetris (book + coursera)\n * Computer systems: a programmers perspective\n * GDB: https://beej.us/guide/bggdb/\n * Assembly vidoes: \n   https://www.youtube.com/playlist?list=PLmxT2pVYo5LB5EzTPZGfFN0c2GDiSXgQe\n\nNetworking:\n\n * TCP/IP illustrated, vol. 1\n * Some videos\n * wireshark","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-05-14T16:58:44.000Z","updated_at":"2018-09-02T19:31:58.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5b2cd8f2fb158a00bfb73445","uuid":"f9c26ac5-ef4f-426d-9f3f-38e62121aad4","title":"Fuzzing Open VNC","slug":"fuzzing","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"></div>","comment_id":"5b2cd8f2fb158a00bfb73445","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-06-22T11:09:38.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5b2f93a5fb158a00bfb73448","uuid":"119ced29-685c-407d-83e4-e930280ac045","title":"Working hard to be lazy","slug":"working-hard-to-be-lazy","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"![hqdefault](/content/images/2018/06/hqdefault.jpg)\\n\\nSo that's a picture of a great writer, UKLG. She's completely not lazy, so apologies to her for inclusion. She's here, though, because she invented something great: The ansible 🌌. And why is that relevant? We'll get there...\\n\\nAs any smart human person in charge of configuring and managing computers knows, I'm bad at my job. Or rather, my job is nearly impossible to be good at, given my human limitations. Why?\\n\\n_There are way too many things to keep track of to be good wrangling a computer, let alone more than one of them 🖥 𝔛 ⧝_!\\n\\nThat's why smart humans invented ✨⚡️**AUTOMATION**⚡️✨. \\n\\nAutomation means: you keep track of all the random changes your make to your myriad `.dotfiles` in a central, version controlled place. You can run a convergent `install.sh` script that puts every alias, `.ignore`, `.gdbinit`, package, etc. you use on your computer, sets it all up, clones the repos you work on and curls and installs the things not easily package-managed, symlinks applicable files (`.bashrc`, etc.), and prints out instructions (that you keep up to date) of manual steps you must execute. You make the effort to improve this script and configuration by re-imaging your computer often and re-running it. You re-run it when its not fresh to test it's convergence. This way you get to be **lazy** when you set up a new laptop or workstation; you simply `git clone dotfiles && cd $_ && ./install.sh`. Nothing to remember, not much work to do.\\n\\nAutomation also means, and here we return to our opening image, making the effort to perform and document server setup via code. I happen to like Ansible for this, for a few reasons: its relatively lightweight, the manifest format is fairly straightforward, it doesn't require an agent to be installed on the machine being managed, and it works fairly hard to be idempotent^[basically you can keep runnning the steps as you're trying to get the whole thing to work and nothing break. Good for fiddlers...] \\n\\nSecurity, for example: There's an article kicking around about the first few minutes on a server, which is a great reference for a simple security baseline: lock things down, turn on updates, etc. I figured, why not do one better and automate this, since I run these same steps on basically every server I boot up (and should do on all of them, which automation makes easy!). So now I have a manifest on my github that can do this again, and I don't have to remember the exact steps. Again, I get to be lazy. I don't really have to look things up. I just know that I did at one point, codified that knowledge in some code that does the thing, and know where that code lives. _Some_ documentation might be nice, because things break, but in general I expect that using the script over time will shake out bugs and make it run smoother every time.\\n\\nAnd in general this is true. Documenting an obscure process that doesn't often run or a setup is complicated to get right doesn't have much as much value as the ability to achieve the desired end without really know how it happened. Sure, sometimes how it happened or how it works matters, such as when a dependency breaks you (but you're protecting yourself from that, right?) or you have to add something. In general though, I've been learning, you've always got more work to do. And reducing some of the toil^[https://landing.google.com/sre/book/chapters/eliminating-toil.html] involved in your work frees you up to actually think at a more synthesizing level. That's the good stuff! 🜚 \\n\\nComputers in general function because we limn their absurd complexity via abstractions. Do you need to know about pipelines and interrupts and L2 caches to write CSS? No! That'd be a terrible waste of time. Do you need to know what to do to lock down a server, if that's your job. Yes! But make your job a little easier by adding in automation, and you'll start to operate strategically rather than always being caught up in the minutia. \\n\\nSo here's an exhortation: work hard to be lazy. Future you will be glad.\"}]],\"sections\":[[10,0]]}","html":"<p><img src=\"/content/images/2018/06/hqdefault.jpg\" alt=\"hqdefault\"></p>\n<p>So that's a picture of a great writer, UKLG. She's completely not lazy, so apologies to her for inclusion. She's here, though, because she invented something great: The ansible 🌌. And why is that relevant? We'll get there...</p>\n<p>As any smart human person in charge of configuring and managing computers knows, I'm bad at my job. Or rather, my job is nearly impossible to be good at, given my human limitations. Why?</p>\n<p><em>There are way too many things to keep track of to be good wrangling a computer, let alone more than one of them 🖥 𝔛 ⧝</em>!</p>\n<p>That's why smart humans invented ✨⚡️<strong>AUTOMATION</strong>⚡️✨.</p>\n<p>Automation means: you keep track of all the random changes your make to your myriad <code>.dotfiles</code> in a central, version controlled place. You can run a convergent <code>install.sh</code> script that puts every alias, <code>.ignore</code>, <code>.gdbinit</code>, package, etc. you use on your computer, sets it all up, clones the repos you work on and curls and installs the things not easily package-managed, symlinks applicable files (<code>.bashrc</code>, etc.), and prints out instructions (that you keep up to date) of manual steps you must execute. You make the effort to improve this script and configuration by re-imaging your computer often and re-running it. You re-run it when its not fresh to test it's convergence. This way you get to be <strong>lazy</strong> when you set up a new laptop or workstation; you simply <code>git clone dotfiles &amp;&amp; cd $_ &amp;&amp; ./install.sh</code>. Nothing to remember, not much work to do.</p>\n<p>Automation also means, and here we return to our opening image, making the effort to perform and document server setup via code. I happen to like Ansible for this, for a few reasons: its relatively lightweight, the manifest format is fairly straightforward, it doesn't require an agent to be installed on the machine being managed, and it works fairly hard to be idempotent<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup></p>\n<p>Security, for example: There's an article kicking around about the first few minutes on a server, which is a great reference for a simple security baseline: lock things down, turn on updates, etc. I figured, why not do one better and automate this, since I run these same steps on basically every server I boot up (and should do on all of them, which automation makes easy!). So now I have a manifest on my github that can do this again, and I don't have to remember the exact steps. Again, I get to be lazy. I don't really have to look things up. I just know that I did at one point, codified that knowledge in some code that does the thing, and know where that code lives. <em>Some</em> documentation might be nice, because things break, but in general I expect that using the script over time will shake out bugs and make it run smoother every time.</p>\n<p>And in general this is true. Documenting an obscure process that doesn't often run or a setup is complicated to get right doesn't have much as much value as the ability to achieve the desired end without really know how it happened. Sure, sometimes how it happened or how it works matters, such as when a dependency breaks you (but you're protecting yourself from that, right?) or you have to add something. In general though, I've been learning, you've always got more work to do. And reducing some of the toil<sup class=\"footnote-ref\"><a href=\"#fn2\" id=\"fnref2\">[2]</a></sup> involved in your work frees you up to actually think at a more synthesizing level. That's the good stuff! 🜚</p>\n<p>Computers in general function because we limn their absurd complexity via abstractions. Do you need to know about pipelines and interrupts and L2 caches to write CSS? No! That'd be a terrible waste of time. Do you need to know what to do to lock down a server, if that's your job. Yes! But make your job a little easier by adding in automation, and you'll start to operate strategically rather than always being caught up in the minutia.</p>\n<p>So here's an exhortation: work hard to be lazy. Future you will be glad.</p>\n<hr class=\"footnotes-sep\">\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>basically you can keep runnning the steps as you're trying to get the whole thing to work and nothing break. Good for fiddlers... <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n<li id=\"fn2\" class=\"footnote-item\"><p>https://landing.google.com/sre/book/chapters/eliminating-toil.html <a href=\"#fnref2\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n","comment_id":"5b2f93a5fb158a00bfb73448","plaintext":"So that's a picture of a great writer, UKLG. She's completely not lazy, so\napologies to her for inclusion. She's here, though, because she invented\nsomething great: The ansible 🌌. And why is that relevant? We'll get there...\n\nAs any smart human person in charge of configuring and managing computers knows,\nI'm bad at my job. Or rather, my job is nearly impossible to be good at, given\nmy human limitations. Why?\n\nThere are way too many things to keep track of to be good wrangling a computer,\nlet alone more than one of them 🖥 𝔛 ⧝!\n\nThat's why smart humans invented ✨⚡️AUTOMATION⚡️✨.\n\nAutomation means: you keep track of all the random changes your make to your\nmyriad .dotfiles  in a central, version controlled place. You can run a\nconvergent install.sh  script that puts every alias, .ignore, .gdbinit, package,\netc. you use on your computer, sets it all up, clones the repos you work on and\ncurls and installs the things not easily package-managed, symlinks applicable\nfiles (.bashrc, etc.), and prints out instructions (that you keep up to date) of\nmanual steps you must execute. You make the effort to improve this script and\nconfiguration by re-imaging your computer often and re-running it. You re-run it\nwhen its not fresh to test it's convergence. This way you get to be lazy  when\nyou set up a new laptop or workstation; you simply git clone dotfiles && cd $_\n&& ./install.sh. Nothing to remember, not much work to do.\n\nAutomation also means, and here we return to our opening image, making the\neffort to perform and document server setup via code. I happen to like Ansible\nfor this, for a few reasons: its relatively lightweight, the manifest format is\nfairly straightforward, it doesn't require an agent to be installed on the\nmachine being managed, and it works fairly hard to be idempotent[1]\n\nSecurity, for example: There's an article kicking around about the first few\nminutes on a server, which is a great reference for a simple security baseline:\nlock things down, turn on updates, etc. I figured, why not do one better and\nautomate this, since I run these same steps on basically every server I boot up\n(and should do on all of them, which automation makes easy!). So now I have a\nmanifest on my github that can do this again, and I don't have to remember the\nexact steps. Again, I get to be lazy. I don't really have to look things up. I\njust know that I did at one point, codified that knowledge in some code that\ndoes the thing, and know where that code lives. Some  documentation might be\nnice, because things break, but in general I expect that using the script over\ntime will shake out bugs and make it run smoother every time.\n\nAnd in general this is true. Documenting an obscure process that doesn't often\nrun or a setup is complicated to get right doesn't have much as much value as\nthe ability to achieve the desired end without really know how it happened.\nSure, sometimes how it happened or how it works matters, such as when a\ndependency breaks you (but you're protecting yourself from that, right?) or you\nhave to add something. In general though, I've been learning, you've always got\nmore work to do. And reducing some of the toil[2]  involved in your work frees\nyou up to actually think at a more synthesizing level. That's the good stuff! 🜚\n\nComputers in general function because we limn their absurd complexity via\nabstractions. Do you need to know about pipelines and interrupts and L2 caches\nto write CSS? No! That'd be a terrible waste of time. Do you need to know what\nto do to lock down a server, if that's your job. Yes! But make your job a little\neasier by adding in automation, and you'll start to operate strategically rather\nthan always being caught up in the minutia.\n\nSo here's an exhortation: work hard to be lazy. Future you will be glad.\n\n\n--------------------------------------------------------------------------------\n\n 1. basically you can keep runnning the steps as you're trying to get the whole\n    thing to work and nothing break. Good for fiddlers... ↩︎\n    \n    \n 2. https://landing.google.com/sre/book/chapters/eliminating-toil.html ↩︎","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-06-24T12:50:45.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":"2018-06-26T10:57:27.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5b7071a1d72f9500bf10c990","uuid":"f8e8c9f0-ff89-4a5f-9608-09fe00d24de7","title":"The Wisdom of Cliff Stoll","slug":"the-wisdom-of-cliff-stoll","mobiledoc":"{\"version\":\"0.3.1\",\"markups\":[],\"atoms\":[],\"cards\":[[\"card-markdown\",{\"cardName\":\"card-markdown\",\"markdown\":\"\"}]],\"sections\":[[10,0]]}","html":"<div class=\"kg-card-markdown\"></div>","comment_id":"5b7071a1d72f9500bf10c990","plaintext":"","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-08-12T17:42:57.000Z","updated_at":"2018-08-20T20:22:29.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5b7071b1d72f9500bf10c992","uuid":"cbbdf729-2207-4808-bfdf-251e43fc5091","title":"I am security and so can you","slug":"i-am-security-and-so-can-you-2","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"em\"],[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach \"],[0,[0],1,\"learning\"],[0,[],0,\" security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.\"]]],[1,\"p\",[[0,[],0,\"Perhaps, security is like Justice Potter said:\"]]],[1,\"blockquote\",[[0,[],0,\"I know it when I see it.\"]]],[1,\"p\",[[0,[],0,\"That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \\\"Who's this guy? He's not an expert. He's just some schmo with a blog.\\\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.\"]]],[1,\"p\",[[0,[],0,\"At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called \"],[0,[1],1,\"Security\"],[0,[],0,\". Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere with one single torch illuminating their faces and their hands, which would signal to you, oh brave developer, with a thumbs up or down, the fate of your precious code. Perhaps this primordial \"],[0,[1],1,\"Security\"],[0,[],0,\" scene is what drives our fear now\"]]]]}","html":"<p>Security, from the perspective of a programmer, often feels abstract. It's both a domain of knowledge and a quality of the programs we write and the systems we construct. And given that, how does one approach <em>learning</em> security? How do we know if our code is insecure? How can we make our code more secure? Its not something you can easily measure, and the scope and scales of it boggle the mind. An errant bit can be a security event, friendly open-source maintainers may be thieves in disguise, and security vulnerabilities can be emergent properties not just of the code but of the interaction of the parts in a larger whole, bashing into the flawed assumptions we've made, getting munged by the users and abusers of our systems.</p><p>Perhaps, security is like Justice Potter said:</p><blockquote>I know it when I see it.</blockquote><p>That may be unsatisfactory for many, but when we lack even the most basic ability to measure the security relevant properties of our systems, how can we know that we're writing secure code? I'm going to let you in on a secret: your code will never be 100% secure. You probably realized that in your gut somewhere. That's not the $0.99 slice you ate for lunch. Its the gnawing worry that somebody somewhere is gonna use your code to do...something bad...and you don't like it. And yet the fact that security is never an absolutely decided contest is no reason to bury your head in the sand and ignore the subject, my dear developer friend. And so I present, for your consideration, a step forward, based on something I tried, on the path of security learning. Let me first say what you're thinking: \"Who's this guy? He's not an expert. He's just some schmo with a blog.\" And you'd be right. I propose the following not as an expert but as a fellow traveler on the path, who's perhaps a step or two ahead of where you are now.</p><p>At the dawn of time, when people bashed wrenches into Ethernet cables for 3 months to get developers some place to run code, when nobody could look up and see the sky because of their shelf-like brows and thus the cloud was a distant dream, there were people called <strong>Security</strong>. Before you, the special writer of code, were allowed to run that code somewhere, these people examined your stuff using abstruse rituals, possibly burning bones or old DOS manuals, and they would deliver their findings tribunal-like, in a darkened ampitheatere with one single torch illuminating their faces and their hands, which would signal to you, oh brave developer, with a thumbs up or down, the fate of your precious code. Perhaps this primordial <strong>Security</strong> scene is what drives our fear now</p>","comment_id":"5b7071b1d72f9500bf10c992","plaintext":"Security, from the perspective of a programmer, often feels abstract. It's both\na domain of knowledge and a quality of the programs we write and the systems we\nconstruct. And given that, how does one approach learning  security? How do we\nknow if our code is insecure? How can we make our code more secure? Its not\nsomething you can easily measure, and the scope and scales of it boggle the\nmind. An errant bit can be a security event, friendly open-source maintainers\nmay be thieves in disguise, and security vulnerabilities can be emergent\nproperties not just of the code but of the interaction of the parts in a larger\nwhole, bashing into the flawed assumptions we've made, getting munged by the\nusers and abusers of our systems.\n\nPerhaps, security is like Justice Potter said:\n\nI know it when I see it.That may be unsatisfactory for many, but when we lack\neven the most basic ability to measure the security relevant properties of our\nsystems, how can we know that we're writing secure code? I'm going to let you in\non a secret: your code will never be 100% secure. You probably realized that in\nyour gut somewhere. That's not the $0.99 slice you ate for lunch. Its the\ngnawing worry that somebody somewhere is gonna use your code to do...something\nbad...and you don't like it. And yet the fact that security is never an\nabsolutely decided contest is no reason to bury your head in the sand and ignore\nthe subject, my dear developer friend. And so I present, for your consideration,\na step forward, based on something I tried, on the path of security learning.\nLet me first say what you're thinking: \"Who's this guy? He's not an expert. He's\njust some schmo with a blog.\" And you'd be right. I propose the following not as\nan expert but as a fellow traveler on the path, who's perhaps a step or two\nahead of where you are now.\n\nAt the dawn of time, when people bashed wrenches into Ethernet cables for 3\nmonths to get developers some place to run code, when nobody could look up and\nsee the sky because of their shelf-like brows and thus the cloud was a distant\ndream, there were people called Security. Before you, the special writer of\ncode, were allowed to run that code somewhere, these people examined your stuff\nusing abstruse rituals, possibly burning bones or old DOS manuals, and they\nwould deliver their findings tribunal-like, in a darkened ampitheatere with one\nsingle torch illuminating their faces and their hands, which would signal to\nyou, oh brave developer, with a thumbs up or down, the fate of your precious\ncode. Perhaps this primordial Security  scene is what drives our fear now","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-08-12T17:43:13.000Z","updated_at":"2019-01-03T12:36:29.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5b8bc38153f78100bf4cf733","uuid":"3a4b0a7d-7736-44e3-b17d-2de652d36c79","title":"'Learning How to Learn'","slug":"quick-summary-of-learning-how-to-learn","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[[\"strong\"]],\"sections\":[[1,\"p\",[[0,[],0,\"'Learning how to learn', by Barbara Oakley, is a compendium of techniques for learning effectively or more effectively, backed by neuroscience and cognitive psychology. Increasing ones ability to learn speeds up your knowledge compounding rate, and is time magnificently well spent.\"]]],[3,\"ol\",[[[0,[0],1,\"Know of and take advantage of the different modes of the brain\"],[0,[],0,\": Diffuse and Focussed. If you're learning something totally new or you're stuck on a problem, take a break of some sort to allow diffuse mode to do its work.\"]],[[0,[0],1,\"Pomodoro\"],[0,[],0,\" technique is useful for giving your brain adequate focus and break time to integrate new information. It can also be useful for overcoming procrastination\"]],[[0,[0],1,\"Exercise\"],[0,[],0,\": it increases your memory and ability to learn new things\"]],[[0,[],0,\"Re-reading and highlighting aren't as effective as studying and then \"],[0,[0],1,\"attempting to recall\"],[0,[],0,\" directly the content of the material you're studying (page, video, etc).\"]],[[0,[0],1,\"Practice and review\"],[0,[],0,\" of material are key to deeper mastery\"]],[[0,[0],1,\"Self knowledge\"],[0,[],0,\": Sometimes people who learn more slowly learn more deeply. Sometimes those with poor working memories are creative. Sometimes super focus and strong working memory block creativity by preventing associative thinking. Sometimes learning to rapidly can lead to incorrect conclusions or superficial understanding.\"]]]],[1,\"p\",[[0,[],0,\"\\t\"]]]]}","html":"<p>'Learning how to learn', by Barbara Oakley, is a compendium of techniques for learning effectively or more effectively, backed by neuroscience and cognitive psychology. Increasing ones ability to learn speeds up your knowledge compounding rate, and is time magnificently well spent.</p><ol><li><strong>Know of and take advantage of the different modes of the brain</strong>: Diffuse and Focussed. If you're learning something totally new or you're stuck on a problem, take a break of some sort to allow diffuse mode to do its work.</li><li><strong>Pomodoro</strong> technique is useful for giving your brain adequate focus and break time to integrate new information. It can also be useful for overcoming procrastination</li><li><strong>Exercise</strong>: it increases your memory and ability to learn new things</li><li>Re-reading and highlighting aren't as effective as studying and then <strong>attempting to recall</strong> directly the content of the material you're studying (page, video, etc).</li><li><strong>Practice and review</strong> of material are key to deeper mastery</li><li><strong>Self knowledge</strong>: Sometimes people who learn more slowly learn more deeply. Sometimes those with poor working memories are creative. Sometimes super focus and strong working memory block creativity by preventing associative thinking. Sometimes learning to rapidly can lead to incorrect conclusions or superficial understanding.</li></ol><p>\t</p>","comment_id":"5b8bc38153f78100bf4cf733","plaintext":"'Learning how to learn', by Barbara Oakley, is a compendium of techniques for\nlearning effectively or more effectively, backed by neuroscience and cognitive\npsychology. Increasing ones ability to learn speeds up your knowledge\ncompounding rate, and is time magnificently well spent.\n\n 1. Know of and take advantage of the different modes of the brain: Diffuse and\n    Focussed. If you're learning something totally new or you're stuck on a\n    problem, take a break of some sort to allow diffuse mode to do its work.\n 2. Pomodoro  technique is useful for giving your brain adequate focus and break\n    time to integrate new information. It can also be useful for overcoming\n    procrastination\n 3. Exercise: it increases your memory and ability to learn new things\n 4. Re-reading and highlighting aren't as effective as studying and then \n    attempting to recall  directly the content of the material you're studying\n    (page, video, etc).\n 5. Practice and review  of material are key to deeper mastery\n 6. Self knowledge: Sometimes people who learn more slowly learn more deeply.\n    Sometimes those with poor working memories are creative. Sometimes super\n    focus and strong working memory block creativity by preventing associative\n    thinking. Sometimes learning to rapidly can lead to incorrect conclusions or\n    superficial understanding.","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-09-02T11:03:29.000Z","updated_at":"2018-10-20T19:30:07.000Z","published_at":"2018-09-02T11:22:26.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5bdb70a9b4b47100bf06b8a5","uuid":"83f0a72a-95ea-4b33-8ae7-2f93aa48c898","title":"The Joys of debugging","slug":"the-joys-of-debugging","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[[\"soft-return\",\"\",{}]],\"cards\":[[\"code\",{\"code\":\"require 'yaml'\\n\\nput YAML::VERSION\\n\\ntestCase = {sha: \\n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\\n\\nputs YAML.dump(testCase)\"}],[\"markdown\",{\"markdown\":\"```ruby\\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \\\"cd /tmp/test && ruby test.rb\\n\\n2.0.17\\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\\n\\n\\n○ → ruby test.rb\\n\\n2.1.0\\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\\n```\\n\\n\"}],[\"image\",{\"src\":\"/content/images/2018/11/letters_1-112113.jpg\"}]],\"markups\":[[\"em\"],[\"a\",[\"href\",\"https://github.com/buildpack\"]],[\"a\"],[\"strong\"],[\"code\"],[\"a\",[\"href\",\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\"]],[\"a\",[\"href\",\"http://yaml.org/spec/1.2/spec.html#id2805071\"]],[\"a\",[\"href\",\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\"]],[\"a\",[\"href\",\"https://www.zandermackie.com/give-a-damn/\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"Today at work I was trying to merging a PR, and I noticed something \"],[0,[0],1,\"very strange\"],[0,[],0,\" during the rebase. I work on a team that, among other things, \"],[0,[1],1,\"manages dependencies for applications\"],[0,[2],1,\".\"],[0,[],0,\" We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.\"]]],[1,\"blockquote\",[[0,[],0,\"A select few of SHAs now had single quotes around them. Wat?\"]]],[1,\"p\",[[0,[],0,\"This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.\"]]],[1,\"p\",[[0,[],0,\"I \"],[0,[3],1,\"love\"],[0,[],0,\" a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!\"]]],[1,\"p\",[[0,[],0,\"Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,\"]]],[1,\"blockquote\",[[0,[],0,\"What's changed recently?\"]]],[1,\"p\",[[0,[],0,\"So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\"]]],[1,\"p\",[[0,[],0,\"Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.\"]]],[1,\"p\",[[0,[],0,\"You'll notice that I said \"],[0,[0],1,\"pertinent\"],[0,[],0,\" changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake\"]]],[1,\"p\",[[0,[],0,\"Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.\"]]],[1,\"p\",[[0,[],0,\"Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from \"],[0,[4],1,\"ruby:2.3.1-slim -> ruby:2.3-slim\"],[0,[],0,\". Okay so that was probably it. So, next step:\"]]],[1,\"blockquote\",[[0,[],0,\"Develop a hypothesis and test it\"]]],[1,\"p\",[[0,[],0,\"The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either \"],[0,[4],1,\"libyaml\"],[0,[],0,\" or the Ruby YAML library (basically a thin wrapper around \"],[0,[4],1,\"libyaml\"],[0,[],0,\") got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.\"]]],[1,\"blockquote\",[[0,[],0,\"Create an isolated example of the bug to test your hypothesis\"]]],[1,\"p\",[[0,[],0,\"In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:\"]]],[10,0],[1,\"p\",[[0,[],0,\"So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:\"]]],[10,1],[1,\"p\",[[0,[],0,\"AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the \"],[0,[4],1,\"psych\"],[0,[],0,\" commits to see if anything stands out. \"]]],[1,\"p\",[[0,[],0,\"Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized \"],[0,[5],1,\"like so to compare the tags\"],[0,[],0,\". And now \"],[0,[3],1,\"that\"],[0,[],0,\" looks promising \"]]],[1,\"blockquote\",[[0,[],0,\"\\\"Support YAML 1.2 Core Schema.\\\"\"]]],[1,\"p\",[[0,[],0,\"Looking through that commit, and the issue linked, I found myself in the \"],[0,[6],1,\"YAML spec\"],[0,[],0,\". Oh lord.\"]]],[10,2],[1,\"p\",[[0,[],0,\"Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with \"],[0,[7],1,\"this commit\"],[0,[],0,\", psych was wrapping value starting in zeros in quotes. \"]]],[1,\"p\",[[1,[],0,0],[0,[],0,\"And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do\"]]],[1,\"blockquote\",[[0,[],0,\"Read specs and read the code of your dependencies\"]]],[1,\"p\",[[0,[],0,\"That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. \"]]],[1,\"p\",[[0,[],0,\"We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. \"]]],[1,\"p\",[]],[1,\"p\",[[0,[],0,\"Or was it? Remember the output we saw in the \"],[0,[4],1,\"ci:latest\"],[0,[],0,\" docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again. \"],[0,[8],1,\"Check out the follow up\"],[0,[],0,\".\"]]]]}","html":"<p>Today at work I was trying to merging a PR, and I noticed something <em>very strange</em> during the rebase. I work on a team that, among other things, <a href=\"https://github.com/buildpack\">manages dependencies for applications</a><a>.</a> We define the versions of a runtime available to an application through a manifest, which is in YAML form. And part of the manifest includes SHAs of the runtimes, which we use to verify their integrity.</p><blockquote>A select few of SHAs now had single quotes around them. Wat?</blockquote><p>This wasn't necessarily a problem, but it was a confusing change, at the very least.  Spooky 👻. But was it a bug? And why was it happening? I had to find out.</p><p>I <strong>love</strong> a good debug.  For the curious and patient, its a wonderfully rewarding exercise in problem solving. You're guaranteed to learn things about your codebase and services that you run. And if you're deliberate in your approach, you can learn things about debugging! Which makes you a better debugger! Feedback loops!</p><p>Okay so I always start with questions. What's the behavior I'm seeing? Do we have time to understand this or is this an emergency that we can triage later? And most importantly,</p><blockquote>What's changed recently?</blockquote><p>So we checked the commit of the YAML change. Automation. Where are the code paths that actually write this YAML, that are invoked by our automation? Hmm...nothing changed there recently. Some 2 year old Ruby code.</p><p>Okay let's try and correlate this YAML change with something else. This technique roughly looks like finding when the new behavior started, and backtracking to any pertinent changes that happened just before the behavior started exhibiting. Its a bit like being a detective (at least the masterpiece theater type 🧐) -  you're trying to develop a timeline of the event in question, building up a picture in your mind. Don't jump on causes just yet. Steep yourself in information and let diffuse thinking be your guide.</p><p>You'll notice that I said <em>pertinent</em> changes. In the ideal case, every aspect of the environment in question is version controlled in some way, even at the system level. Luckily, our CI tasks run in docker containers. Unfortunately, we use the latest tag (some shame on us), so its a bit harder to track what exactly was in the container that ran the code in question, but in general the point stands. And we're much better off than if we have some IT provisioned snowflake</p><p>Git, of course, is a great source for this information...its actually basically the only source of information that's reliable. Even the release notes of your dependencies could be wrong, but git don't lie (at least I hope not). Git it is basically the entire magic sauce to doing debugging at the unit and integration level (IE, within one codebase and then between system boundaries). If there was a git-like thing for reality, detectives would have a much easier time. I don't even really know what that means; hopefully I didn't just describe the blockchain ▇ ⛓.</p><p>Anyway, so we looked through our git log and found something that happened around that time: the CI image was updated from <code>ruby:2.3.1-slim -&gt; ruby:2.3-slim</code>. Okay so that was probably it. So, next step:</p><blockquote>Develop a hypothesis and test it</blockquote><p>The change had something to do with YAML and Ruby, so lets look into that. Hypothesis: some version of either <code>libyaml</code> or the Ruby YAML library (basically a thin wrapper around <code>libyaml</code>) got bumped with that CI change and its now dumping YAML differently. Not exactly a brilliant insight, but its something to go on.</p><blockquote>Create an isolated example of the bug to test your hypothesis</blockquote><p>In my mind, you don't have a bug if you can't reproduce it; you have a Heisenbug or some distributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin and put it in a bottle 👹. We wrote a little Ruby program that should reproduce the behavior:</p><pre><code>require 'yaml'\n\nput YAML::VERSION\n\ntestCase = {sha: \n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\n\nputs YAML.dump(testCase)</code></pre><p>So now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we tested it:</p><pre><code class=\"language-ruby\">○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c &quot;cd /tmp/test &amp;&amp; ruby test.rb\n\n2.0.17\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\n\n\n○ → ruby test.rb\n\n2.1.0\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\n</code></pre>\n<p>AHA⚠️ So there it is...problem isolated. But...wait that's not what we expected...that's the opposite! I mean, clearly there's something to our hypothesis, but we were just confused at that point! Hmmm. So leaning back, I let my mind relax. After I woke up from my nap, I vaguely remembered seeing something like this before...something to do with floats and YAML...lets check the <code>psych</code> commits to see if anything stands out. </p><p>Again, git to the rescue. Luckily, Github has a great compare ui, which I utilized <a href=\"https://github.com/ruby/psych/compare/v2.0.17...v2.1.0\">like so to compare the tags</a>. And now <strong>that</strong> looks promising </p><blockquote>\"Support YAML 1.2 Core Schema.\"</blockquote><p>Looking through that commit, and the issue linked, I found myself in the <a href=\"http://yaml.org/spec/1.2/spec.html#id2805071\">YAML spec</a>. Oh lord.</p><figure class=\"kg-card kg-image-card\"><img src=\"/content/images/2018/11/letters_1-112113.jpg\" class=\"kg-image\"></figure><p>Well it actually wasn't all that bad. I learned that YAML is crazy! But more importantly, I learned that a new part of the spec changes the behavior for recognizing floats, making strings starting with a zero optionally resolved as floats via some implicit typecasting. And sure enough, with <a href=\"https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673\">this commit</a>, psych was wrapping value starting in zeros in quotes. </p><p><br>And that was more spec compliant, thought it threw us off. It was wasn't a bug, just a surprise. So we must be pulling in the new code. So the lesson here:  if you want to really learn why things behave as they do</p><blockquote>Read specs and read the code of your dependencies</blockquote><p>That latter piece of advice, reading the code of your dependencies, is the most tedious but most rewarding and useful part of debugging a complex issue like this. </p><p>We jumped into one of our jobs running on CI, and ran the test code to confirm the new behavior. Mystery solved. </p><p></p><p>Or was it? Remember the output we saw in the <code>ci:latest</code> docker container? That seemed to indicate something else was going on. Spoiler alert: it was, but it was a bit of a red herring. And yes, I went down that rabbit-hole and learned something again. <a href=\"https://www.zandermackie.com/give-a-damn/\">Check out the follow up</a>.</p>","comment_id":"5bdb70a9b4b47100bf06b8a5","plaintext":"Today at work I was trying to merging a PR, and I noticed something very strange \n during the rebase. I work on a team that, among other things, manages\ndependencies for applications [https://github.com/buildpack].  We define the\nversions of a runtime available to an application through a manifest, which is\nin YAML form. And part of the manifest includes SHAs of the runtimes, which we\nuse to verify their integrity.\n\nA select few of SHAs now had single quotes around them. Wat?This wasn't\nnecessarily a problem, but it was a confusing change, at the very least.  Spooky\n👻. But was it a bug? And why was it happening? I had to find out.\n\nI love  a good debug.  For the curious and patient, its a wonderfully rewarding\nexercise in problem solving. You're guaranteed to learn things about your\ncodebase and services that you run. And if you're deliberate in your approach,\nyou can learn things about debugging! Which makes you a better debugger!\nFeedback loops!\n\nOkay so I always start with questions. What's the behavior I'm seeing? Do we\nhave time to understand this or is this an emergency that we can triage later?\nAnd most importantly,\n\nWhat's changed recently?So we checked the commit of the YAML change. Automation.\nWhere are the code paths that actually write this YAML, that are invoked by our\nautomation? Hmm...nothing changed there recently. Some 2 year old Ruby code.\n\nOkay let's try and correlate this YAML change with something else. This\ntechnique roughly looks like finding when the new behavior started, and\nbacktracking to any pertinent changes that happened just before the behavior\nstarted exhibiting. Its a bit like being a detective (at least the masterpiece\ntheater type 🧐) -  you're trying to develop a timeline of the event in\nquestion, building up a picture in your mind. Don't jump on causes just yet.\nSteep yourself in information and let diffuse thinking be your guide.\n\nYou'll notice that I said pertinent  changes. In the ideal case, every aspect of\nthe environment in question is version controlled in some way, even at the\nsystem level. Luckily, our CI tasks run in docker containers. Unfortunately, we\nuse the latest tag (some shame on us), so its a bit harder to track what exactly\nwas in the container that ran the code in question, but in general the point\nstands. And we're much better off than if we have some IT provisioned snowflake\n\nGit, of course, is a great source for this information...its actually basically\nthe only source of information that's reliable. Even the release notes of your\ndependencies could be wrong, but git don't lie (at least I hope not). Git it is\nbasically the entire magic sauce to doing debugging at the unit and integration\nlevel (IE, within one codebase and then between system boundaries). If there was\na git-like thing for reality, detectives would have a much easier time. I don't\neven really know what that means; hopefully I didn't just describe the\nblockchain ▇ ⛓.\n\nAnyway, so we looked through our git log and found something that happened\naround that time: the CI image was updated from ruby:2.3.1-slim -> ruby:2.3-slim\n. Okay so that was probably it. So, next step:\n\nDevelop a hypothesis and test itThe change had something to do with YAML and\nRuby, so lets look into that. Hypothesis: some version of either libyaml  or the\nRuby YAML library (basically a thin wrapper around libyaml) got bumped with that\nCI change and its now dumping YAML differently. Not exactly a brilliant insight,\nbut its something to go on.\n\nCreate an isolated example of the bug to test your hypothesisIn my mind, you\ndon't have a bug if you can't reproduce it; you have a Heisenbug or some\ndistributed systems Gremlin. Or you're drunk. Anway, try and catch that Gremlin\nand put it in a bottle 👹. We wrote a little Ruby program that should reproduce\nthe behavior:\n\nrequire 'yaml'\n\nput YAML::VERSION\n\ntestCase = {sha: \n'0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'}\n\nputs YAML.dump(testCase)\n\nSo now, bug-in-a-bottle in hand, we can test our hypothesis. Here's how we\ntested it:\n\n○ → docker run -v $(pwd):/tmp/test -it cfbuildpacks/ci:latest bash -c \"cd /tmp/test && ruby test.rb\n\n2.0.17\nsha: 0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112\n\n\n○ → ruby test.rb\n\n2.1.0\nsha: '0911c3aeb2c25dd0a41f0225e0c0f2baaa404ffb9cd772166133572f5fb91112'\n\n\nAHA⚠️ So there it is...problem isolated. But...wait that's not what we\nexpected...that's the opposite! I mean, clearly there's something to our\nhypothesis, but we were just confused at that point! Hmmm. So leaning back, I\nlet my mind relax. After I woke up from my nap, I vaguely remembered seeing\nsomething like this before...something to do with floats and YAML...lets check\nthe psych  commits to see if anything stands out. \n\nAgain, git to the rescue. Luckily, Github has a great compare ui, which I\nutilized like so to compare the tags\n[https://github.com/ruby/psych/compare/v2.0.17...v2.1.0]. And now that  looks\npromising \n\n\"Support YAML 1.2 Core Schema.\"Looking through that commit, and the issue\nlinked, I found myself in the YAML spec. Oh lord.\n\nWell it actually wasn't all that bad. I learned that YAML is crazy! But more\nimportantly, I learned that a new part of the spec changes the behavior for\nrecognizing floats, making strings starting with a zero optionally resolved as\nfloats via some implicit typecasting. And sure enough, with this commit\n[https://github.com/ruby/psych/commit/b737f0811a9687cf86f44f0a35f61cbde9eac673],\npsych was wrapping value starting in zeros in quotes. \n\n\nAnd that was more spec compliant, thought it threw us off. It was wasn't a bug,\njust a surprise. So we must be pulling in the new code. So the lesson here:  if\nyou want to really learn why things behave as they do\n\nRead specs and read the code of your dependenciesThat latter piece of advice,\nreading the code of your dependencies, is the most tedious but most rewarding\nand useful part of debugging a complex issue like this. \n\nWe jumped into one of our jobs running on CI, and ran the test code to confirm\nthe new behavior. Mystery solved. \n\n\n\nOr was it? Remember the output we saw in the ci:latest  docker container? That\nseemed to indicate something else was going on. Spoiler alert: it was, but it\nwas a bit of a red herring. And yes, I went down that rabbit-hole and learned\nsomething again. Check out the follow up\n[https://www.zandermackie.com/give-a-damn/].","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-11-01T21:31:21.000Z","updated_at":"2018-11-30T21:35:31.000Z","published_at":"2018-11-13T22:31:31.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5beb1b354f25ed00c0ee91b6","uuid":"7d6e8869-eaa0-4215-b248-a0f982051d18","title":"Give a damn","slug":"give-a-damn","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[[\"image\",{\"src\":\"/content/images/2018/11/facepalm.gif\",\"cardWidth\":\"\"}]],\"markups\":[[\"code\"],[\"strong\"],[\"em\"],[\"a\",[\"href\",\"https://github.com/moby/moby/issues/13331\"]],[\"a\",[\"href\",\"https://github.com/golang-standards/project-layout\"]],[\"a\",[\"href\",\"https://github.com/docker/cli/pull/1498\"]]],\"sections\":[[1,\"p\",[[0,[],0,\"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: \"],[0,[0],1,\"docker run koolKontainer:latest /bin/bash\"],[0,[],0,\" does not update your local copy of the image with that tag. You must \"],[0,[0],1,\"docker pull koolKontainer:latest\"],[0,[],0,\" to make sure your image is up to date.\"]]],[1,\"p\",[[0,[],0,\"In other words, if you have an \"],[0,[1],1,\"old\"],[0,[],0,\" copy of that image, tagged with latest, the former command will run that \"],[0,[1],1,\"old\"],[0,[],0,\" local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. \"]]],[1,\"p\",[[0,[],0,\"This behavior \"],[0,[2],1,\"kind\"],[0,[],0,\" of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local \"],[0,[0],1,\"master\"],[0,[],0,\" would be up to date with \"],[0,[0],1,\"origin/master\"],[0,[],0,\" without pulling. I think, for me, the disconnect comes from the tag name: \"],[0,[0],1,\"latest\"],[0,[],0,\". You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.\"]]],[10,0],[1,\"p\",[[0,[],0,\"But fair enough, I didn't know or take the time to research the behavior of \"],[0,[0],1,\"docker run\"],[0,[],0,\". So here's one piece of advice time-saving advice I'll give you:\"]]],[1,\"blockquote\",[[0,[],0,\"Learn the behavior of your tools.\"]]],[1,\"p\",[[0,[],0,\"That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a \"],[0,[3],1,\"longstanding issue on the project\"],[0,[],0,\", with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!\"]]],[1,\"p\",[[0,[],0,\"...\"]]],[1,\"p\",[[0,[],0,\"After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \\\"You sort of seem like an asshole jumping in there with all the complaints\\\".\"]]],[1,\"p\",[[0,[],0,\"And then I realized something else:\"]]],[1,\"blockquote\",[[0,[],0,\"Its always easier to complain than to give a damn. So, why not give a damn?\"]]],[1,\"p\",[[0,[],0,\"And I deleted my comment and rolled up my sleeves to pitch in.\"]]],[1,\"p\",[[0,[],0,\"Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) \"]]],[1,\"p\",[[0,[],0,\"Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.\"]]],[1,\"p\",[[0,[],0,\"As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly \"],[0,[4],1,\"have a standard structure\"],[0,[],0,\", so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure \"],[0,[5],1,\"the PR\"],[0,[],0,\" needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free and complaining feels good, but giving a damn feels better!\"]]]]}","html":"<p>In my last post, at the very end, I alluded to a Docker cli gotcha. For those of you who didn't have a shudder of recognition, I'll tell you something it took me a while to figure out: <code>docker run koolKontainer:latest /bin/bash</code> does not update your local copy of the image with that tag. You must <code>docker pull koolKontainer:latest</code> to make sure your image is up to date.</p><p>In other words, if you have an <strong>old</strong> copy of that image, tagged with latest, the former command will run that <strong>old</strong> local copy. However if the image does not exists at all locally, it will be retrieved from Docker Hub. </p><p>This behavior <em>kind</em> of makes sense, in retrospect. I guess if you think of a docker image like a git repo, you wouldn't necessarily assume that your local <code>master</code> would be up to date with <code>origin/master</code> without pulling. I think, for me, the disconnect comes from the tag name: <code>latest</code>. You sort of assume that means, well, the most recent version of the image. And you sort of assume docker cli would reach out to the internet to figure that out. Not so. And not necessarily wrong as a design choice. The tag convention is really at fault, I think, but nonetheless I was surprised. And I got bit; I actually spent a good deal of time trying to figure out why my bug test code was behaving locally differently than the behavior I was seeing on our CI server. And when I figured out what was going on there was a bit of frustration.</p><figure class=\"kg-card kg-image-card\"><img src=\"/content/images/2018/11/facepalm.gif\" class=\"kg-image\"></figure><p>But fair enough, I didn't know or take the time to research the behavior of <code>docker run</code>. So here's one piece of advice time-saving advice I'll give you:</p><blockquote>Learn the behavior of your tools.</blockquote><p>That being said, I was a bit miffed when I learned what was happening. So, I took to the internet. And I found that I wasn't the only person confused by this behavior. Turns out, there's a <a href=\"https://github.com/moby/moby/issues/13331\">longstanding issue on the project</a>, with a ton of comments from people who were also surprised by this behavior. And you know how a good pile-on brings out the folks! I got on that issue, and added my own little rant and felt pretty good about myself. OSS duty done!</p><p>...</p><p>After lunch I got back to my desk and looked at the open window with my comment at the end, and I thought to myself, \"You sort of seem like an asshole jumping in there with all the complaints\".</p><p>And then I realized something else:</p><blockquote>Its always easier to complain than to give a damn. So, why not give a damn?</blockquote><p>And I deleted my comment and rolled up my sleeves to pitch in.</p><p>Now I want to caveat this with saying that I know contributing to OSS is a luxury and a privilege. I'm a white, male, childless software engineer, so I rank relatively high on the advantages scale. I recognize that, for sure. I also recognize that contributing to a very public project like Docker is super scary, especially for those who've never contributed to open source. I've a got a post in the works about making your first OSS contribution, so stay tuned. So, take what I'm saying with that large rock of salt and not as a finger wagging directed at anybody but myself (who even reads this blog anyway?) </p><p>Caveat caveated, let me just say that I turns out that making this change was easier than I thought! I hemmed and hawed, intimidated about hacking a huge, new, codebase. But I browsed the issues on the project and outstanding PRs, and all the maintainers seemed nice and community minded. So I cracked open VSCode, and poked around.</p><p>As usual, smarter people than me had done most of the work: the requirements were pretty well hashed out in discussions, as was the actual API of the flag changes. Also Go is generally such a simple, approachable (some would even say boring) language that reading the codebase and figuring out where to make the change, which is usually the hardest part of contributing to a new project, was pretty straightforward. Go project mostly <a href=\"https://github.com/golang-standards/project-layout\">have a standard structure</a>, so I knew essentially where I had to look for the code covering the docker run command. And it turns out that I was basically able to leverage the existing logic , with some slight modifications and duplications, to achieve my ends. I'm sure <a href=\"https://github.com/docker/cli/pull/1498\">the PR</a> needs work, but its gotten a bit of attention and hopefully it'll land. And I've got the warm, fuzzy feeling that giving back brings. So remember kids, OSS is free and complaining feels good, but giving a damn feels better!</p>","comment_id":"5beb1b354f25ed00c0ee91b6","plaintext":"In my last post, at the very end, I alluded to a Docker cli gotcha. For those of\nyou who didn't have a shudder of recognition, I'll tell you something it took me\na while to figure out: docker run koolKontainer:latest /bin/bash  does not\nupdate your local copy of the image with that tag. You must docker pull\nkoolKontainer:latest  to make sure your image is up to date.\n\nIn other words, if you have an old  copy of that image, tagged with latest, the\nformer command will run that old  local copy. However if the image does not\nexists at all locally, it will be retrieved from Docker Hub. \n\nThis behavior kind  of makes sense, in retrospect. I guess if you think of a\ndocker image like a git repo, you wouldn't necessarily assume that your local \nmaster  would be up to date with origin/master  without pulling. I think, for\nme, the disconnect comes from the tag name: latest. You sort of assume that\nmeans, well, the most recent version of the image. And you sort of assume docker\ncli would reach out to the internet to figure that out. Not so. And not\nnecessarily wrong as a design choice. The tag convention is really at fault, I\nthink, but nonetheless I was surprised. And I got bit; I actually spent a good\ndeal of time trying to figure out why my bug test code was behaving locally\ndifferently than the behavior I was seeing on our CI server. And when I figured\nout what was going on there was a bit of frustration.\n\nBut fair enough, I didn't know or take the time to research the behavior of \ndocker run. So here's one piece of advice time-saving advice I'll give you:\n\nLearn the behavior of your tools.That being said, I was a bit miffed when I\nlearned what was happening. So, I took to the internet. And I found that I\nwasn't the only person confused by this behavior. Turns out, there's a \nlongstanding issue on the project [https://github.com/moby/moby/issues/13331],\nwith a ton of comments from people who were also surprised by this behavior. And\nyou know how a good pile-on brings out the folks! I got on that issue, and added\nmy own little rant and felt pretty good about myself. OSS duty done!\n\n...\n\nAfter lunch I got back to my desk and looked at the open window with my comment\nat the end, and I thought to myself, \"You sort of seem like an asshole jumping\nin there with all the complaints\".\n\nAnd then I realized something else:\n\nIts always easier to complain than to give a damn. So, why not give a damn?And I\ndeleted my comment and rolled up my sleeves to pitch in.\n\nNow I want to caveat this with saying that I know contributing to OSS is a\nluxury and a privilege. I'm a white, male, childless software engineer, so I\nrank relatively high on the advantages scale. I recognize that, for sure. I also\nrecognize that contributing to a very public project like Docker is super scary,\nespecially for those who've never contributed to open source. I've a got a post\nin the works about making your first OSS contribution, so stay tuned. So, take\nwhat I'm saying with that large rock of salt and not as a finger wagging\ndirected at anybody but myself (who even reads this blog anyway?) \n\nCaveat caveated, let me just say that I turns out that making this change was\neasier than I thought! I hemmed and hawed, intimidated about hacking a huge,\nnew, codebase. But I browsed the issues on the project and outstanding PRs, and\nall the maintainers seemed nice and community minded. So I cracked open VSCode,\nand poked around.\n\nAs usual, smarter people than me had done most of the work: the requirements\nwere pretty well hashed out in discussions, as was the actual API of the flag\nchanges. Also Go is generally such a simple, approachable (some would even say\nboring) language that reading the codebase and figuring out where to make the\nchange, which is usually the hardest part of contributing to a new project, was\npretty straightforward. Go project mostly have a standard structure\n[https://github.com/golang-standards/project-layout], so I knew essentially\nwhere I had to look for the code covering the docker run command. And it turns\nout that I was basically able to leverage the existing logic , with some slight\nmodifications and duplications, to achieve my ends. I'm sure the PR\n[https://github.com/docker/cli/pull/1498]  needs work, but its gotten a bit of\nattention and hopefully it'll land. And I've got the warm, fuzzy feeling that\ngiving back brings. So remember kids, OSS is free and complaining feels good,\nbut giving a damn feels better!","feature_image":null,"featured":0,"page":0,"status":"published","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-11-13T18:43:01.000Z","updated_at":"2018-11-30T21:34:00.000Z","published_at":"2018-11-30T21:34:00.000Z","custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null},{"id":"5c05229f91f04500c0db702a","uuid":"d0493a25-64a0-4817-aacc-04492a6eb7fd","title":"What even is a container","slug":"what-even-is-a-container","mobiledoc":"{\"version\":\"0.3.1\",\"atoms\":[],\"cards\":[],\"markups\":[],\"sections\":[[1,\"p\",[[0,[],0,\"Cgroups\"]]],[1,\"p\",[[0,[],0,\"Namespaces\"]]],[1,\"p\",[[0,[],0,\"Seccomp\"]]],[1,\"p\",[[0,[],0,\"Etc\"]]],[1,\"p\",[[0,[],0,\"OCI image format\"]]]]}","html":"<p>Cgroups</p><p>Namespaces</p><p>Seccomp</p><p>Etc</p><p>OCI image format</p>","comment_id":"5c05229f91f04500c0db702a","plaintext":"Cgroups\n\nNamespaces\n\nSeccomp\n\nEtc\n\nOCI image format","feature_image":null,"featured":0,"page":0,"status":"draft","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"author_id":"1","created_at":"2018-12-03T12:33:35.000Z","updated_at":"2018-12-03T12:33:55.000Z","published_at":null,"custom_excerpt":null,"codeinjection_head":"","codeinjection_foot":"","og_image":null,"og_title":null,"og_description":null,"twitter_image":null,"twitter_title":null,"twitter_description":null,"custom_template":null,"canonical_url":null}],"posts_authors":[{"id":"5af0deafc6b750002285a223","post_id":"5af0deafc6b750002285a222","author_id":"1","sort_order":0},{"id":"5af0e1f9c6b750002285a225","post_id":"5af0e1f9c6b750002285a224","author_id":"1","sort_order":0},{"id":"5af0e2a5c6b750002285a227","post_id":"5af0e2a5c6b750002285a226","author_id":"1","sort_order":0},{"id":"5af0e2d0c6b750002285a229","post_id":"5af0e2d0c6b750002285a228","author_id":"1","sort_order":0},{"id":"5af0e8bcc6b750002285a22b","post_id":"5af0e8bcc6b750002285a22a","author_id":"1","sort_order":0},{"id":"5af0f9bdc6b750002285a22d","post_id":"5af0f9bdc6b750002285a22c","author_id":"1","sort_order":0},{"id":"5af0fcc2c6b750002285a22f","post_id":"5af0fcc2c6b750002285a22e","author_id":"1","sort_order":0},{"id":"5af9c04424a9e500bf9c8a44","post_id":"5af9c04424a9e500bf9c8a43","author_id":"1","sort_order":0},{"id":"5b2cd8f2fb158a00bfb73446","post_id":"5b2cd8f2fb158a00bfb73445","author_id":"1","sort_order":0},{"id":"5b2f93a5fb158a00bfb73449","post_id":"5b2f93a5fb158a00bfb73448","author_id":"1","sort_order":0},{"id":"5b7071a1d72f9500bf10c991","post_id":"5b7071a1d72f9500bf10c990","author_id":"1","sort_order":0},{"id":"5b7071b1d72f9500bf10c993","post_id":"5b7071b1d72f9500bf10c992","author_id":"1","sort_order":0},{"id":"5b8bc38153f78100bf4cf734","post_id":"5b8bc38153f78100bf4cf733","author_id":"1","sort_order":0},{"id":"5bdb70a9b4b47100bf06b8a6","post_id":"5bdb70a9b4b47100bf06b8a5","author_id":"1","sort_order":0},{"id":"5beb1b364f25ed00c0ee91b7","post_id":"5beb1b354f25ed00c0ee91b6","author_id":"1","sort_order":0},{"id":"5c05229f91f04500c0db702b","post_id":"5c05229f91f04500c0db702a","author_id":"1","sort_order":0}],"posts_tags":[],"roles":[{"id":"5af0dd34fbe06b001896067b","name":"Administrator","description":"Administrators","created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896067c","name":"Editor","description":"Editors","created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896067d","name":"Author","description":"Authors","created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896067e","name":"Contributor","description":"Contributors","created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5af0dd34fbe06b001896067f","name":"Owner","description":"Blog Owner","created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"},{"id":"5bb7755755369e00b5d0d773","name":"Admin Integration","description":"External Apps","created_at":"2018-10-05T14:29:43.000Z","updated_at":"2018-10-05T14:29:43.000Z"}],"roles_users":[{"id":"5af0dd35fbe06b00189606b5","role_id":"5af0dd34fbe06b001896067d","user_id":"5951f5fca366002ebd5dbef7"},{"id":"5af0dd37fbe06b0018960745","role_id":"5af0dd34fbe06b001896067f","user_id":"1"}],"settings":[{"id":"5af0dd392435490022c675e3","key":"db_hash","value":"f8e98ff0-f4ea-46f0-90f8-cf71170430e4","type":"core","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675e4","key":"next_update_check","value":"1556812854","type":"core","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2019-05-01T16:00:53.000Z"},{"id":"5af0dd392435490022c675e5","key":"notifications","value":"[]","type":"core","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675e6","key":"title","value":"Code and its Discontents","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-11-30T21:49:47.000Z"},{"id":"5af0dd392435490022c675e7","key":"description","value":"","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:31:16.000Z"},{"id":"5af0dd392435490022c675e8","key":"logo","value":"/content/images/2018/10/fig2-7.gif","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-10-20T21:52:45.000Z"},{"id":"5af0dd392435490022c675e9","key":"cover_image","value":"","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:31:16.000Z"},{"id":"5af0dd392435490022c675ea","key":"icon","value":"/content/images/2018/10/noun_Double-Face-Illusion_309411.png","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-10-20T21:52:45.000Z"},{"id":"5af0dd392435490022c675eb","key":"default_locale","value":"en","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675ec","key":"active_timezone","value":"America/New_York","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:31:16.000Z"},{"id":"5af0dd392435490022c675ed","key":"force_i18n","value":"true","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675ef","key":"amp","value":"true","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675f0","key":"ghost_head","value":"<!-- Global site tag (gtag.js) - Google Analytics -->\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-74653783-1\"></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n\n  gtag('config', 'UA-74653783-1');\n</script>","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-11-30T21:48:53.000Z"},{"id":"5af0dd392435490022c675f1","key":"ghost_foot","value":"","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-11-30T21:48:53.000Z"},{"id":"5af0dd392435490022c675f2","key":"facebook","value":"","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675f3","key":"twitter","value":"@zandermackie","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-06-27T01:42:37.000Z"},{"id":"5af0dd392435490022c675f4","key":"labs","value":"{\"publicAPI\":true,\"subscribers\":true}","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-10-20T18:25:10.000Z"},{"id":"5af0dd392435490022c675f5","key":"navigation","value":"[{\"label\":\"Home\",\"url\":\"/\"},{\"label\":\"About\",\"url\":\"/about/\"}]","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:31:38.000Z"},{"id":"5af0dd392435490022c675f6","key":"slack","value":"[]","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-10-20T16:34:17.000Z"},{"id":"5af0dd392435490022c675f7","key":"unsplash","value":"{\"isActive\":false}","type":"blog","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-06-26T11:21:21.000Z"},{"id":"5af0dd392435490022c675f8","key":"active_theme","value":"scriptor-10-20","type":"theme","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-10-20T18:47:24.000Z"},{"id":"5af0dd392435490022c675f9","key":"active_apps","value":"[]","type":"app","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675fa","key":"installed_apps","value":"[]","type":"app","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675fb","key":"is_private","value":"false","type":"private","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675fc","key":"password","value":"","type":"private","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5af0dd392435490022c675fd","key":"public_hash","value":"f487e95f38d01c6cdfc771db7c91c5","type":"private","created_at":"2018-05-07T23:11:53.000Z","updated_at":"2018-05-07T23:11:53.000Z"},{"id":"5bbf6cb5431cc100cba56ab5","key":"session_secret","value":"3a08febcc7eb85f0f361a47a60a80113b593b3209a3ec64e330642ddb5829dc0","type":"core","created_at":"2018-10-11T15:31:01.000Z","updated_at":"2018-10-11T15:31:01.000Z"},{"id":"5c10f7be6d161800bfcd8d75","key":"members_public_key","value":"-----BEGIN RSA PUBLIC KEY-----\nMIGJAoGBAIi1Tn94Dac1ojuw1c0NHAAjeR633+SJtEOMC1NwMVp8ChVfVuqhd/NRvFffNAVf\nLk/vpXH5w5hTHLQ5n33pEeiY3fq0wTl7fAUlN9ehPDysviZdtr74MjCLNhwBnlshgEbh55/I\nlX95ebmYqXT/x2TMM/mQAN/zGEdJ5PC/uL9VAgMBAAE=\n-----END RSA PUBLIC KEY-----\n","type":"members","created_at":"2018-12-12T11:57:50.000Z","updated_at":"2018-12-12T11:57:50.000Z"},{"id":"5c10f7be6d161800bfcd8d76","key":"members_private_key","value":"-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQCItU5/eA2nNaI7sNXNDRwAI3ket9/kibRDjAtTcDFafAoVX1bqoXfzUbxX\n3zQFXy5P76Vx+cOYUxy0OZ996RHomN36tME5e3wFJTfXoTw8rL4mXba++DIwizYcAZ5bIYBG\n4eefyJV/eXm5mKl0/8dkzDP5kADf8xhHSeTwv7i/VQIDAQABAoGBAAzWSZq6oT2UUbmdL1Zj\n5r80lYkG5yVEsQKuwdmB7YB7qU68dyLtKqBUioUN1oqyl1y2OijrtSw2kblyt8FRA3dZwKJD\njvcNQINWyImC+I1LMRhknXQuVMasHsdu8WuEejx7qpmJ1wl45gfiBuFzXYi+/Mcm0UCPtjcG\nRLY8Vpc5AkEA7yWRYmzFw6LuRlYt23AujQJjhTbmSjv+6p84pIg7R7E2zBNt/m+iPSWjlshH\n6KaLjT59dugSpY7EaPug0jY3zwJBAJJXpsv/UK7MK0iMSjLd7oT4GM0bj07Tn/5gVDEKCqO9\njSLDQVRQ0qwVfRZQhEWDBHy2KlTQ8d6vazrxRztD+5sCQQC8IhzWhmWqO3IhyUg4Gm+0pM1w\nDjlq6vnmz6162mVwR/yo3RwqDt5eJk8knpjbcLHWQvPm6DlLHx5qzJG+7cJHAkB9mIhokAj4\n2/VR4EVV/q7Uo/D1J3AI4QtxT88x/0I+YVIdwaHx8SO92PtwCU5cMiPJvLX78Q+EZN0My0Kt\nFJ19AkEAp+YP8F3G00OdLOUrDeHfEmFU7+2OUpO6Nr2hsSBHV27i4Q+9+TvYRU8kjO0OphLK\ne7C5Korx4i5qAGzpzqbzaw==\n-----END RSA PRIVATE KEY-----\n","type":"members","created_at":"2018-12-12T11:57:50.000Z","updated_at":"2018-12-12T11:57:50.000Z"},{"id":"5c10f7be6d161800bfcd8d77","key":"members_session_secret","value":"7938121980a470447881482ced905653eae991691ccc20b1398d128fd8b096d0","type":"members","created_at":"2018-12-12T11:57:50.000Z","updated_at":"2018-12-12T11:57:50.000Z"},{"id":"5c7e6cbe9be25a00cc49c353","key":"members_subscription_settings","value":"{\"isPaid\":false,\"paymentProcessors\":[{\"adapter\":\"stripe\",\"config\":{\"secret_token\":\"\",\"public_token\":\"\",\"product\":{\"name\":\"Ghost Subscription\"},\"plans\":[{\"name\":\"Monthly\",\"currency\":\"usd\",\"interval\":\"month\",\"amount\":\"\"},{\"name\":\"Yearly\",\"currency\":\"usd\",\"interval\":\"year\",\"amount\":\"\"}]}}]}","type":"members","created_at":"2019-03-05T12:34:06.000Z","updated_at":"2019-03-05T12:34:06.000Z"},{"id":"5cc0b775e999a900c035ddca","key":"theme_session_secret","value":"aa7cee489e9242eba6ac65e78fee059c09971839ec5916e02d927950c2daa2e4","type":"core","created_at":"2019-04-24T19:22:29.000Z","updated_at":"2019-04-24T19:22:29.000Z"}],"subscribers":[],"tags":[{"id":"5af0dd34fbe06b0018960676","name":"Getting Started","slug":"getting-started","description":null,"feature_image":null,"parent_id":null,"visibility":"public","meta_title":null,"meta_description":null,"created_at":"2018-05-07T23:11:48.000Z","updated_at":"2018-05-07T23:11:48.000Z"}],"users":[{"id":"1","name":"Zander Mackie","slug":"zander","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$kL6/kX0xYmyhrOinqKo8WODbw0jN1ai1Qkm2VxkXiSKWU9q5LroX.","email":"zmackie@gmail.com","profile_image":"//www.gravatar.com/avatar/e525dd9dc84c68e55de0e0dd2a724f3d?s=250&d=mm&r=x","cover_image":null,"bio":null,"website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":"[\"getting-started\",\"using-the-editor\",\"static-post\",\"featured-post\",\"upload-a-theme\"]","last_seen":"2019-05-01T17:19:46.000Z","created_at":"2018-05-07T23:11:48.000Z","updated_at":"2019-05-01T17:19:46.000Z"},{"id":"5951f5fca366002ebd5dbef7","name":"Ghost","slug":"ghost","ghost_auth_access_token":null,"ghost_auth_id":null,"password":"$2a$10$yWmEHlP7FC/rdraadvtDL.j1N0KOCcd1Vw2sPY0BlaaLSr7pCtlLy","email":"ghost-author@example.com","profile_image":null,"cover_image":null,"bio":"You can delete this user to remove all the welcome posts","website":null,"location":null,"facebook":null,"twitter":null,"accessibility":null,"status":"active","locale":null,"visibility":"public","meta_title":null,"meta_description":null,"tour":null,"last_seen":null,"created_at":"2018-05-07T23:11:49.000Z","updated_at":"2018-05-07T23:11:49.000Z"}],"webhooks":[]}}]}